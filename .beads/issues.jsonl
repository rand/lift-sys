{"id":"lift-sys-100","title":"Phase 2.4.1: Intent Taxonomy Definition - Define complete intent taxonomy: CRUD, transformations, validations, communications, control flow (50+ categories). Comprehensive, mutually exclusive, hierarchical. Files: lift_sys/nlp/intent_taxonomy.py (~200 lines), docs/INTENT_TAXONOMY.md","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:29.845364-06:00","updated_at":"2025-10-15T08:22:29.845364-06:00"}
{"id":"lift-sys-101","title":"Phase 2.4.2: Rule-Based Intent Classifier - Implement rule-based intent classification: map verbs to intent categories, consider clause context, handle multi-intent, build hierarchy. 90%+ simple, 70%+ complex, \u003c100ms. Files: lift_sys/nlp/intent_classifier.py (~300 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:29.984235-06:00","updated_at":"2025-10-15T08:22:29.984235-06:00","dependencies":[{"issue_id":"lift-sys-101","depends_on_id":"lift-sys-100","type":"blocks","created_at":"2025-10-15T08:22:29.984913-06:00","created_by":"rand"}]}
{"id":"lift-sys-102","title":"Phase 2.4.3: Intent Signature Generator - Generate canonical intent signatures: format Operation\u003cTarget\u003e, handle compound intents, include constraints. Signatures consistent, parseable, unique. Files: lift_sys/nlp/signature_generator.py (~150 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:30.124362-06:00","updated_at":"2025-10-15T08:22:30.124362-06:00","dependencies":[{"issue_id":"lift-sys-102","depends_on_id":"lift-sys-101","type":"blocks","created_at":"2025-10-15T08:22:30.125029-06:00","created_by":"rand"}]}
{"id":"lift-sys-103","title":"Phase 2.4.4: Phase 2 Integration Testing - Comprehensive Phase 2 testing: complete analysis pipeline, ambiguity detection (80% precision, 70% recall), intent classification (80% accuracy), performance \u003c2s. 30 diverse test scenarios. Files: tests/e2e/test_phase2_complete.py. Deliverables: test report, accuracy metrics, bug list","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:30.267778-06:00","updated_at":"2025-10-15T08:22:30.267778-06:00","dependencies":[{"issue_id":"lift-sys-103","depends_on_id":"lift-sys-95","type":"blocks","created_at":"2025-10-15T08:22:30.268537-06:00","created_by":"rand"},{"issue_id":"lift-sys-103","depends_on_id":"lift-sys-99","type":"blocks","created_at":"2025-10-15T08:22:30.26881-06:00","created_by":"rand"},{"issue_id":"lift-sys-103","depends_on_id":"lift-sys-102","type":"blocks","created_at":"2025-10-15T08:22:30.268982-06:00","created_by":"rand"}]}
{"id":"lift-sys-104","title":"Phase 3.1.1: Refinement Panel Component - Build main refinement panel: side panel showing current issue, context display, suggestion list, custom input, accept/reject buttons. 60fps smooth interactions. Files: frontend/src/components/RefinementPanel.tsx (~500 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:41.473466-06:00","updated_at":"2025-10-15T08:22:41.473466-06:00","dependencies":[{"issue_id":"lift-sys-104","depends_on_id":"lift-sys-85","type":"blocks","created_at":"2025-10-15T08:22:41.474192-06:00","created_by":"rand"}]}
{"id":"lift-sys-105","title":"Phase 3.1.2: Suggestion Display Component - Build suggestion display: radio button list, show rationale, show confidence scores, highlight selected, support custom input. Accessible with keyboard navigation. Files: frontend/src/components/SuggestionList.tsx (~300 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:41.62482-06:00","updated_at":"2025-10-15T08:22:41.62482-06:00","dependencies":[{"issue_id":"lift-sys-105","depends_on_id":"lift-sys-104","type":"blocks","created_at":"2025-10-15T08:22:41.6255-06:00","created_by":"rand"}]}
{"id":"lift-sys-106","title":"Phase 3.1.3: Progress Tracker Component - Build refinement progress tracker: show total issues (holes + ambiguities), show resolved vs unresolved, progress bar, jump to next issue button. Files: frontend/src/components/ProgressTracker.tsx (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:41.768742-06:00","updated_at":"2025-10-15T08:22:41.768742-06:00","dependencies":[{"issue_id":"lift-sys-106","depends_on_id":"lift-sys-104","type":"blocks","created_at":"2025-10-15T08:22:41.769457-06:00","created_by":"rand"}]}
{"id":"lift-sys-107","title":"Phase 3.1.4: Refinement State Management - Implement frontend state management: track current issue, track history, handle optimistic updates, sync with backend. Files: frontend/src/stores/refinementStore.ts (~300 lines). Acceptance: State updates correctly, backend sync reliable","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:41.911789-06:00","updated_at":"2025-10-15T08:22:41.911789-06:00","dependencies":[{"issue_id":"lift-sys-107","depends_on_id":"lift-sys-106","type":"blocks","created_at":"2025-10-15T08:22:41.912622-06:00","created_by":"rand"}]}
{"id":"lift-sys-108","title":"Phase 3.2.1: LLM Suggestion Prompt Engineering - Design prompts for LLM suggestions: type suggestions, parameter names, implementations. Include context, optimize for quality and cost. 80%+ accuracy, \u003c/bin/zsh.01 per suggestion, \u003c2s latency. Files: lift_sys/refinement/llm_prompts.py (~200 lines), prompt docs","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:55.129511-06:00","updated_at":"2025-10-15T08:22:55.129511-06:00","dependencies":[{"issue_id":"lift-sys-108","depends_on_id":"lift-sys-81","type":"blocks","created_at":"2025-10-15T08:22:55.130196-06:00","created_by":"rand"}]}
{"id":"lift-sys-109","title":"Phase 3.2.2: LLM Integration Layer - Integrate LLM for suggestions: use existing provider abstraction (Anthropic/OpenAI), implement caching, handle rate limiting, fallback to heuristics. Files: lift_sys/refinement/llm_suggester.py (~250 lines). Acceptance: LLM suggestions work, caching reduces costs, fallback transparent","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:55.271566-06:00","updated_at":"2025-10-15T08:22:55.271566-06:00","dependencies":[{"issue_id":"lift-sys-109","depends_on_id":"lift-sys-108","type":"blocks","created_at":"2025-10-15T08:22:55.272325-06:00","created_by":"rand"}]}
{"id":"lift-sys-110","title":"Phase 3.2.3: Suggestion Ranking Algorithm - Rank suggestions by relevance: combine heuristic and LLM, score by context match, type compatibility, user history. Top suggestion correct 70%+, \u003c100ms. Files: lift_sys/refinement/suggestion_ranker.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:55.418314-06:00","updated_at":"2025-10-15T08:22:55.418314-06:00","dependencies":[{"issue_id":"lift-sys-110","depends_on_id":"lift-sys-109","type":"blocks","created_at":"2025-10-15T08:22:55.419042-06:00","created_by":"rand"}]}
{"id":"lift-sys-111","title":"Phase 3.2.4: Contextual Suggestion Enhancement - Enhance suggestions with context: extract relevant context from codebase, include existing types/patterns, show usage examples, link to docs. Files: lift_sys/refinement/context_enhancer.py (~200 lines). Acceptance: Context relevant, examples helpful, links work","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:55.564456-06:00","updated_at":"2025-10-15T08:22:55.564456-06:00","dependencies":[{"issue_id":"lift-sys-111","depends_on_id":"lift-sys-110","type":"blocks","created_at":"2025-10-15T08:22:55.565173-06:00","created_by":"rand"}]}
{"id":"lift-sys-112","title":"Phase 3.3.1: IR Update Propagation Engine - Implement change propagation: when hole resolved update related elements, validate consistency, re-run analysis if needed, update dependent metadata. Performance \u003c500ms, no infinite loops. Files: lift_sys/refinement/propagation_engine.py (~300 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:08.843368-06:00","updated_at":"2025-10-15T08:23:08.843368-06:00","dependencies":[{"issue_id":"lift-sys-112","depends_on_id":"lift-sys-82","type":"blocks","created_at":"2025-10-15T08:23:08.84422-06:00","created_by":"rand"}]}
{"id":"lift-sys-113","title":"Phase 3.3.2: Consistency Checker - Check IR consistency after updates: type compatibility, constraint satisfaction, reference validity, flag new ambiguities. Files: lift_sys/refinement/consistency_checker.py (~250 lines). Acceptance: Catches type mismatches, validates all constraints, identifies broken references","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:08.990211-06:00","updated_at":"2025-10-15T08:23:08.990211-06:00","dependencies":[{"issue_id":"lift-sys-113","depends_on_id":"lift-sys-112","type":"blocks","created_at":"2025-10-15T08:23:08.99082-06:00","created_by":"rand"}]}
{"id":"lift-sys-114","title":"Phase 3.3.3: Real-Time Update WebSocket - Implement WebSocket for real-time updates: send IR updates to clients, send new ambiguities, send progress updates, handle reconnection. Multiple clients supported. Update lift_sys/api/websocket.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:09.135088-06:00","updated_at":"2025-10-15T08:23:09.135088-06:00","dependencies":[{"issue_id":"lift-sys-114","depends_on_id":"lift-sys-113","type":"blocks","created_at":"2025-10-15T08:23:09.135774-06:00","created_by":"rand"}]}
{"id":"lift-sys-115","title":"Phase 3.3.4: Frontend Real-Time Update Handler - Handle real-time updates in frontend: listen to WebSocket, update IR view, update highlights, show notifications for new issues. UI doesn't flicker. Files: frontend/src/hooks/useRealtimeUpdates.ts (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:09.286044-06:00","updated_at":"2025-10-15T08:23:09.286044-06:00","dependencies":[{"issue_id":"lift-sys-115","depends_on_id":"lift-sys-114","type":"blocks","created_at":"2025-10-15T08:23:09.286753-06:00","created_by":"rand"}]}
{"id":"lift-sys-116","title":"Phase 3.4.1: Refinement Flow Optimization - Optimize refinement UX: streamline issue navigation, improve keyboard shortcuts, add undo/redo, polish animations. User testing with 5 participants. Acceptance: Flow intuitive, keyboard shortcuts work, undo/redo reliable, smooth animations","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:21.824157-06:00","updated_at":"2025-10-15T08:23:21.824157-06:00","dependencies":[{"issue_id":"lift-sys-116","depends_on_id":"lift-sys-107","type":"blocks","created_at":"2025-10-15T08:23:21.825246-06:00","created_by":"rand"},{"issue_id":"lift-sys-116","depends_on_id":"lift-sys-111","type":"blocks","created_at":"2025-10-15T08:23:21.825442-06:00","created_by":"rand"},{"issue_id":"lift-sys-116","depends_on_id":"lift-sys-115","type":"blocks","created_at":"2025-10-15T08:23:21.825604-06:00","created_by":"rand"}]}
{"id":"lift-sys-117","title":"Phase 3.4.2: Error Handling and Edge Cases - Handle error cases: LLM API failures, WebSocket disconnections, invalid user input, concurrent modifications. Errors handled gracefully, helpful messages, automatic recovery. Files: tests/integration/test_error_handling.py","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:21.966637-06:00","updated_at":"2025-10-15T08:23:21.966637-06:00","dependencies":[{"issue_id":"lift-sys-117","depends_on_id":"lift-sys-109","type":"blocks","created_at":"2025-10-15T08:23:21.967312-06:00","created_by":"rand"},{"issue_id":"lift-sys-117","depends_on_id":"lift-sys-114","type":"blocks","created_at":"2025-10-15T08:23:21.967574-06:00","created_by":"rand"}]}
{"id":"lift-sys-118","title":"Phase 3.4.3: Phase 3 Integration Testing - Comprehensive Phase 3 testing: complete refinement flow, test with 5 alpha testers, performance testing, stress testing. Users complete IR \u003c5 minutes, satisfaction \u003e7/10, no critical bugs. Files: tests/e2e/test_phase3_complete.py. Deliverables: test report, user study findings, bug list","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:22.111532-06:00","updated_at":"2025-10-15T08:23:22.111532-06:00","dependencies":[{"issue_id":"lift-sys-118","depends_on_id":"lift-sys-116","type":"blocks","created_at":"2025-10-15T08:23:22.112225-06:00","created_by":"rand"},{"issue_id":"lift-sys-118","depends_on_id":"lift-sys-117","type":"blocks","created_at":"2025-10-15T08:23:22.112482-06:00","created_by":"rand"}]}
{"id":"lift-sys-119","title":"Phase 4.1.1: Hover Tooltip Engine - Build rich tooltip system: multi-section tooltips (type, relationships, provenance), dynamic content loading, smart positioning, keyboard accessible. Loading \u003c100ms, keyboard navigation works. Files: frontend/src/components/TooltipEngine.tsx (~400 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:37.442636-06:00","updated_at":"2025-10-15T08:23:37.442636-06:00","dependencies":[{"issue_id":"lift-sys-119","depends_on_id":"lift-sys-85","type":"blocks","created_at":"2025-10-15T08:23:37.443289-06:00","created_by":"rand"}]}
{"id":"lift-sys-120","title":"Phase 4.1.2: Provenance Tracking Backend - Track provenance for all IR elements: record where each element came from, track inference chain, store confidence scores, link to source tokens. Files: lift_sys/visualization/provenance_tracker.py (~250 lines). Acceptance: Provenance recorded for all, chain complete, links bidirectional","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:37.593491-06:00","updated_at":"2025-10-15T08:23:37.593491-06:00","dependencies":[{"issue_id":"lift-sys-120","depends_on_id":"lift-sys-84","type":"blocks","created_at":"2025-10-15T08:23:37.594154-06:00","created_by":"rand"}]}
{"id":"lift-sys-121","title":"Phase 4.1.3: Hover Content Generator - Generate hover content from metadata: type info section, relationship section, provenance section, confidence scores, navigation links. Files: lift_sys/visualization/hover_content_generator.py (~200 lines). Acceptance: Content comprehensive, well-formatted, links functional","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:37.74424-06:00","updated_at":"2025-10-15T08:23:37.74424-06:00","dependencies":[{"issue_id":"lift-sys-121","depends_on_id":"lift-sys-120","type":"blocks","created_at":"2025-10-15T08:23:37.744812-06:00","created_by":"rand"}]}
{"id":"lift-sys-122","title":"Phase 4.1.4: Hover Integration - Integrate hover system: connect backend content to frontend tooltips, add to prompt highlighter, add to IR viewer, performance optimization. Hover works on prompt and IR, content loads quickly, no performance issues. Integration code (~150 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:37.898728-06:00","updated_at":"2025-10-15T08:23:37.898728-06:00","dependencies":[{"issue_id":"lift-sys-122","depends_on_id":"lift-sys-119","type":"blocks","created_at":"2025-10-15T08:23:37.8994-06:00","created_by":"rand"},{"issue_id":"lift-sys-122","depends_on_id":"lift-sys-121","type":"blocks","created_at":"2025-10-15T08:23:37.899666-06:00","created_by":"rand"}]}
{"id":"lift-sys-123","title":"Phase 4.2.1: Graph Layout Algorithm - Implement graph layout: force-directed layout (D3.js), position entities logically, handle large graphs (100+ nodes), support zoom/pan. Graph readable, layout stable, good performance. Files: frontend/src/components/RelationshipGraph.tsx (~500 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:50.21654-06:00","updated_at":"2025-10-15T08:23:50.21654-06:00","dependencies":[{"issue_id":"lift-sys-123","depends_on_id":"lift-sys-77","type":"blocks","created_at":"2025-10-15T08:23:50.217219-06:00","created_by":"rand"}]}
{"id":"lift-sys-124","title":"Phase 4.2.2: Interactive Graph Controls - Add graph interactivity: click node→highlight in prompt/IR, hover node→show tooltip, filter by relationship type, search nodes. Files: Graph controls (~300 lines). Acceptance: Click navigation works, hover shows info, filters work, search works","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:50.36687-06:00","updated_at":"2025-10-15T08:23:50.36687-06:00","dependencies":[{"issue_id":"lift-sys-124","depends_on_id":"lift-sys-123","type":"blocks","created_at":"2025-10-15T08:23:50.367605-06:00","created_by":"rand"}]}
{"id":"lift-sys-125","title":"Phase 4.2.3: Graph Side Panel - Build side panel for graph view: toggle visibility, resize panel, legend for relationship types, statistics. Panel toggles smoothly, resizing works, legend clear. Files: frontend/src/components/GraphPanel.tsx (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:23:50.518553-06:00","updated_at":"2025-10-15T08:23:50.518553-06:00","dependencies":[{"issue_id":"lift-sys-125","depends_on_id":"lift-sys-124","type":"blocks","created_at":"2025-10-15T08:23:50.519248-06:00","created_by":"rand"}]}
{"id":"lift-sys-126","title":"Phase 4.2.4: Graph Integration - Integrate graph into main UI: add to IR viewer, sync with other views, preserve state on navigation. Graph integrates cleanly, state synchronization works. Integration code","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:23:50.673992-06:00","updated_at":"2025-10-15T08:23:50.673992-06:00","dependencies":[{"issue_id":"lift-sys-126","depends_on_id":"lift-sys-125","type":"blocks","created_at":"2025-10-15T08:23:50.674658-06:00","created_by":"rand"}]}
{"id":"lift-sys-127","title":"Phase 4.3.1: Navigation Link System - Implement bidirectional navigation: click prompt token→jump to IR element, click IR element→jump to prompt token, scroll into view, highlight target. Both directions work, smooth scrolling, clear highlighting. Files: frontend/src/utils/navigation.ts (~200 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:03.441594-06:00","updated_at":"2025-10-15T08:24:03.441594-06:00","dependencies":[{"issue_id":"lift-sys-127","depends_on_id":"lift-sys-86","type":"blocks","created_at":"2025-10-15T08:24:03.442424-06:00","created_by":"rand"}]}
{"id":"lift-sys-128","title":"Phase 4.3.2: Provenance Visualization - Visualize provenance chains: show inference path (X→Y→Z), display in hover tooltip, optional full provenance panel. Provenance clear, path complete, visual intuitive. Files: frontend/src/components/ProvenanceView.tsx (~300 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:03.594132-06:00","updated_at":"2025-10-15T08:24:03.594132-06:00","dependencies":[{"issue_id":"lift-sys-128","depends_on_id":"lift-sys-120","type":"blocks","created_at":"2025-10-15T08:24:03.594799-06:00","created_by":"rand"}]}
{"id":"lift-sys-129","title":"Phase 4.3.3: Performance Optimization - Optimize visual performance: virtualize long lists, lazy load tooltips, optimize graph rendering, reduce re-renders. 60fps on all views, fast initial load \u003c2s, smooth interactions. Performance improvements","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:03.74803-06:00","updated_at":"2025-10-15T08:24:03.74803-06:00","dependencies":[{"issue_id":"lift-sys-129","depends_on_id":"lift-sys-122","type":"blocks","created_at":"2025-10-15T08:24:03.748783-06:00","created_by":"rand"},{"issue_id":"lift-sys-129","depends_on_id":"lift-sys-126","type":"blocks","created_at":"2025-10-15T08:24:03.749021-06:00","created_by":"rand"}]}
{"id":"lift-sys-130","title":"Phase 4.3.4: Phase 4 Integration Testing - Comprehensive Phase 4 testing: all visual features, navigation, graph visualization, performance, user acceptance testing. All features work, user feedback positive, performance meets targets. Files: tests/e2e/test_phase4_complete.py. Deliverables: test report, user study findings","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:03.904838-06:00","updated_at":"2025-10-15T08:24:03.904838-06:00","dependencies":[{"issue_id":"lift-sys-130","depends_on_id":"lift-sys-127","type":"blocks","created_at":"2025-10-15T08:24:03.905478-06:00","created_by":"rand"},{"issue_id":"lift-sys-130","depends_on_id":"lift-sys-128","type":"blocks","created_at":"2025-10-15T08:24:03.90568-06:00","created_by":"rand"},{"issue_id":"lift-sys-130","depends_on_id":"lift-sys-129","type":"blocks","created_at":"2025-10-15T08:24:03.905871-06:00","created_by":"rand"}]}
{"id":"lift-sys-131","title":"Phase 5.1.1: AST-Based Entity Extraction - Extract entities from code AST: extract classes/functions/variables, extract types from type hints, create Entity objects from code, link to source locations. Extracts all entities, types accurate, links correct. Files: lift_sys/reverse_mode/ast_extractor.py (~300 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:17.355194-06:00","updated_at":"2025-10-15T08:24:17.355194-06:00"}
{"id":"lift-sys-132","title":"Phase 5.1.2: Code Intent Inference - Infer intent from code: extract from docstrings, infer from function name, infer from operations in body, build intent hierarchy. Intent extraction works, 70%+ accuracy. Files: lift_sys/reverse_mode/intent_inferencer.py (~250 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:17.507622-06:00","updated_at":"2025-10-15T08:24:17.507622-06:00","dependencies":[{"issue_id":"lift-sys-132","depends_on_id":"lift-sys-131","type":"blocks","created_at":"2025-10-15T08:24:17.508282-06:00","created_by":"rand"}]}
{"id":"lift-sys-133","title":"Phase 5.1.3: Code Relationship Extraction - Extract relationships from code: function calls, class inheritance, variable references, parameter passing. Relationships extracted, graph complete. Files: lift_sys/reverse_mode/relationship_extractor.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:17.662913-06:00","updated_at":"2025-10-15T08:24:17.662913-06:00","dependencies":[{"issue_id":"lift-sys-133","depends_on_id":"lift-sys-131","type":"blocks","created_at":"2025-10-15T08:24:17.663577-06:00","created_by":"rand"}]}
{"id":"lift-sys-134","title":"Phase 5.1.4: Code-to-EnhancedIR Builder - Build EnhancedIR from code: convert entities to semantic metadata, build relationships, infer intent, create annotations. Produces EnhancedIR, structure matches forward mode, links back to code. Files: lift_sys/reverse_mode/enhanced_ir_builder.py (~300 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:17.819956-06:00","updated_at":"2025-10-15T08:24:17.819956-06:00","dependencies":[{"issue_id":"lift-sys-134","depends_on_id":"lift-sys-132","type":"blocks","created_at":"2025-10-15T08:24:17.820627-06:00","created_by":"rand"},{"issue_id":"lift-sys-134","depends_on_id":"lift-sys-133","type":"blocks","created_at":"2025-10-15T08:24:17.820818-06:00","created_by":"rand"}]}
{"id":"lift-sys-135","title":"Phase 5.2.1: Code Annotation System - Create annotations linking code to IR: map code spans to IR elements, map IR elements to code spans, generate highlights for code view. Links bidirectional, spans accurate. Files: lift_sys/reverse_mode/code_annotator.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:30.62234-06:00","updated_at":"2025-10-15T08:24:30.62234-06:00","dependencies":[{"issue_id":"lift-sys-135","depends_on_id":"lift-sys-134","type":"blocks","created_at":"2025-10-15T08:24:30.623075-06:00","created_by":"rand"}]}
{"id":"lift-sys-136","title":"Phase 5.2.2: Code Syntax Highlighter - Build code highlighter with semantic annotations: use Monaco Editor or CodeMirror, apply semantic highlights (beyond syntax), show entities/relationships, link to IR. Code renders with highlights, semantic highlights clear, good performance. Files: frontend/src/components/CodeHighlighter.tsx (~400 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:30.778262-06:00","updated_at":"2025-10-15T08:24:30.778262-06:00","dependencies":[{"issue_id":"lift-sys-136","depends_on_id":"lift-sys-135","type":"blocks","created_at":"2025-10-15T08:24:30.778939-06:00","created_by":"rand"}]}
{"id":"lift-sys-137","title":"Phase 5.2.3: Code Hover Tooltips - Add hover tooltips to code view: show IR element on hover, show type info, show relationships, link to IR view. Hover shows relevant info, links work. Code hover integration (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:30.937526-06:00","updated_at":"2025-10-15T08:24:30.937526-06:00","dependencies":[{"issue_id":"lift-sys-137","depends_on_id":"lift-sys-136","type":"blocks","created_at":"2025-10-15T08:24:30.938244-06:00","created_by":"rand"}]}
{"id":"lift-sys-138","title":"Phase 5.2.4: Bidirectional Navigation (Code↔IR) - Implement navigation between code and IR: click code→jump to IR element, click IR→jump to code location, scroll into view, highlight target. Both directions work, smooth navigation. Navigation code (~150 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:31.099368-06:00","updated_at":"2025-10-15T08:24:31.099368-06:00","dependencies":[{"issue_id":"lift-sys-138","depends_on_id":"lift-sys-136","type":"blocks","created_at":"2025-10-15T08:24:31.100093-06:00","created_by":"rand"},{"issue_id":"lift-sys-138","depends_on_id":"lift-sys-137","type":"blocks","created_at":"2025-10-15T08:24:31.100326-06:00","created_by":"rand"}]}
{"id":"lift-sys-139","title":"Phase 5.3.1: Split-View Layout - Build split-view layout: code on left, IR on right (configurable), resizable panels, toggle views, sync scrolling (optional). Layout responsive, resizing smooth, toggle instant. Files: frontend/src/components/SplitView.tsx (~300 lines)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:44.258215-06:00","updated_at":"2025-10-15T08:24:44.258215-06:00","dependencies":[{"issue_id":"lift-sys-139","depends_on_id":"lift-sys-136","type":"blocks","created_at":"2025-10-15T08:24:44.258862-06:00","created_by":"rand"}]}
{"id":"lift-sys-140","title":"Phase 5.3.2: Synchronized Highlighting - Synchronize highlights across views: hover in code→highlight IR, hover in IR→highlight code, click in one→highlight in both. Highlights synchronize, no performance lag. Sync logic (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:44.413971-06:00","updated_at":"2025-10-15T08:24:44.413971-06:00","dependencies":[{"issue_id":"lift-sys-140","depends_on_id":"lift-sys-139","type":"blocks","created_at":"2025-10-15T08:24:44.414592-06:00","created_by":"rand"}]}
{"id":"lift-sys-141","title":"Phase 5.3.3: View State Persistence - Persist view state: remember panel sizes, remember scroll positions, remember expanded/collapsed sections. State persists across sessions, restore works reliably. State persistence (~100 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:44.572907-06:00","updated_at":"2025-10-15T08:24:44.572907-06:00","dependencies":[{"issue_id":"lift-sys-141","depends_on_id":"lift-sys-139","type":"blocks","created_at":"2025-10-15T08:24:44.57358-06:00","created_by":"rand"}]}
{"id":"lift-sys-142","title":"Phase 5.3.4: Split-View Polish - Polish split-view experience: smooth animations, keyboard shortcuts, accessibility, mobile considerations. UX smooth, keyboard shortcuts work, accessible. Polish improvements","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:44.736842-06:00","updated_at":"2025-10-15T08:24:44.736842-06:00","dependencies":[{"issue_id":"lift-sys-142","depends_on_id":"lift-sys-139","type":"blocks","created_at":"2025-10-15T08:24:44.737552-06:00","created_by":"rand"},{"issue_id":"lift-sys-142","depends_on_id":"lift-sys-140","type":"blocks","created_at":"2025-10-15T08:24:44.737772-06:00","created_by":"rand"},{"issue_id":"lift-sys-142","depends_on_id":"lift-sys-141","type":"blocks","created_at":"2025-10-15T08:24:44.737937-06:00","created_by":"rand"}]}
{"id":"lift-sys-143","title":"Phase 5.4.1: Reverse Mode Refinement - Enable refinement on lifted IR: detect ambiguities in lifted IR, allow hole resolution, allow intent refinement, update code annotations. Can refine lifted IR, changes update annotations. Refinement integration (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:56.809972-06:00","updated_at":"2025-10-15T08:24:56.809972-06:00","dependencies":[{"issue_id":"lift-sys-143","depends_on_id":"lift-sys-134","type":"blocks","created_at":"2025-10-15T08:24:56.811036-06:00","created_by":"rand"}]}
{"id":"lift-sys-144","title":"Phase 5.4.2: Round-Trip Validation - Validate round-trip fidelity: Code→IR→Code, compare original vs generated, measure semantic equivalence, report differences. Round-trip works, semantic equivalence measured, differences explainable. Files: lift_sys/validation/round_trip_validator.py (~250 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:24:56.962499-06:00","updated_at":"2025-10-15T08:24:56.962499-06:00","dependencies":[{"issue_id":"lift-sys-144","depends_on_id":"lift-sys-143","type":"blocks","created_at":"2025-10-15T08:24:56.963205-06:00","created_by":"rand"}]}
{"id":"lift-sys-145","title":"Phase 5.4.3: Phase 5 Integration Testing - Comprehensive Phase 5 testing: code analysis, split-view, refinement, round-trip, user acceptance testing. All features work, round-trip fidelity good, user feedback positive. Files: tests/e2e/test_phase5_complete.py. Deliverables: test report, user study findings","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:24:57.126974-06:00","updated_at":"2025-10-15T08:24:57.126974-06:00","dependencies":[{"issue_id":"lift-sys-145","depends_on_id":"lift-sys-138","type":"blocks","created_at":"2025-10-15T08:24:57.127715-06:00","created_by":"rand"},{"issue_id":"lift-sys-145","depends_on_id":"lift-sys-142","type":"blocks","created_at":"2025-10-15T08:24:57.127944-06:00","created_by":"rand"},{"issue_id":"lift-sys-145","depends_on_id":"lift-sys-143","type":"blocks","created_at":"2025-10-15T08:24:57.128136-06:00","created_by":"rand"},{"issue_id":"lift-sys-145","depends_on_id":"lift-sys-144","type":"blocks","created_at":"2025-10-15T08:24:57.128316-06:00","created_by":"rand"}]}
{"id":"lift-sys-146","title":"Phase 6.1.1: Backend Performance Profiling - Profile and optimize backend: profile analysis pipeline, identify bottlenecks, optimize slow queries, add caching where needed. Analysis \u003c2s for typical prompts, API responses \u003c500ms, DB queries optimized. Performance report, optimizations","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:11.010843-06:00","updated_at":"2025-10-15T08:25:11.010843-06:00"}
{"id":"lift-sys-147","title":"Phase 6.1.2: Frontend Performance Optimization - Optimize frontend performance: bundle size optimization, code splitting, lazy loading, React rendering optimization. Initial load \u003c2s, 60fps interactions, bundle size \u003c500KB (gzipped). Lighthouse audit, performance benchmarks","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:11.184141-06:00","updated_at":"2025-10-15T08:25:11.184141-06:00"}
{"id":"lift-sys-148","title":"Phase 6.1.3: Database Optimization - Optimize database: add missing indexes, optimize queries, set up connection pooling, configure caching. Queries \u003c100ms, no N+1 queries, connection pooling works. Database optimizations","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:11.347206-06:00","updated_at":"2025-10-15T08:25:11.347206-06:00","dependencies":[{"issue_id":"lift-sys-148","depends_on_id":"lift-sys-146","type":"blocks","created_at":"2025-10-15T08:25:11.348022-06:00","created_by":"rand"}]}
{"id":"lift-sys-149","title":"Phase 6.1.4: Caching Strategy - Implement comprehensive caching: Redis for session data, cache parsed documents, cache LLM suggestions, cache entity graphs. Caching reduces latency 50%+, cache invalidation works, memory usage reasonable. Caching layer (~300 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:11.513749-06:00","updated_at":"2025-10-15T08:25:11.513749-06:00","dependencies":[{"issue_id":"lift-sys-149","depends_on_id":"lift-sys-148","type":"blocks","created_at":"2025-10-15T08:25:11.514535-06:00","created_by":"rand"}]}
{"id":"lift-sys-150","title":"Phase 6.2.1: Unit Test Coverage - Achieve 90%+ test coverage: add missing unit tests, add edge case tests, add error path tests, generate coverage report. 90%+ coverage overall, 95%+ coverage for critical paths, all edge cases tested. Test suite completion, coverage report","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:25.80873-06:00","updated_at":"2025-10-15T08:25:25.80873-06:00"}
{"id":"lift-sys-151","title":"Phase 6.2.2: Integration Test Suite - Comprehensive integration tests: end-to-end workflows, cross-component tests, API integration tests, database integration tests. 50+ integration tests, all workflows covered, tests reliable (no flakiness). Integration tests","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:25.975681-06:00","updated_at":"2025-10-15T08:25:25.975681-06:00","dependencies":[{"issue_id":"lift-sys-151","depends_on_id":"lift-sys-150","type":"blocks","created_at":"2025-10-15T08:25:25.976495-06:00","created_by":"rand"}]}
{"id":"lift-sys-152","title":"Phase 6.2.3: E2E Test Suite - End-to-end test suite: user workflow tests, browser automation (Playwright), test all major features, test error scenarios. 30+ E2E tests, tests run reliably, CI/CD integration. E2E tests","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:26.14403-06:00","updated_at":"2025-10-15T08:25:26.14403-06:00","dependencies":[{"issue_id":"lift-sys-152","depends_on_id":"lift-sys-151","type":"blocks","created_at":"2025-10-15T08:25:26.14488-06:00","created_by":"rand"}]}
{"id":"lift-sys-153","title":"Phase 6.2.4: Load and Stress Testing - Performance and load testing: test with 100+ concurrent users, test with large prompts (1000+ tokens), test with large codebases (10,000+ files), identify breaking points. Handles 100+ concurrent users, no degradation under load, breaking points documented. Load test report","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:26.316836-06:00","updated_at":"2025-10-15T08:25:26.316836-06:00","dependencies":[{"issue_id":"lift-sys-153","depends_on_id":"lift-sys-149","type":"blocks","created_at":"2025-10-15T08:25:26.317651-06:00","created_by":"rand"}]}
{"id":"lift-sys-154","title":"Phase 6.3.1: User Documentation - Complete user documentation: getting started guide, feature documentation, tutorial videos, FAQ, troubleshooting guide. Comprehensive documentation, clear examples, screenshots/videos, searchable. docs/USER_GUIDE.md (~5000 lines), tutorial videos (3-5)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:37.051997-06:00","updated_at":"2025-10-15T08:25:37.051997-06:00"}
{"id":"lift-sys-155","title":"Phase 6.3.2: API Documentation - Complete API documentation: OpenAPI spec, endpoint descriptions, request/response examples, error codes, rate limiting docs. All endpoints documented, examples work, interactive docs (Swagger). API documentation","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:37.221197-06:00","updated_at":"2025-10-15T08:25:37.221197-06:00"}
{"id":"lift-sys-156","title":"Phase 6.3.3: Developer Documentation - Documentation for developers: architecture overview, component documentation, extension guides, contributing guide. Architecture clear, components documented, extension points explained. docs/DEVELOPER_GUIDE.md (~3000 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:37.391042-06:00","updated_at":"2025-10-15T08:25:37.391042-06:00"}
{"id":"lift-sys-157","title":"Phase 6.3.4: Deployment Documentation - Deployment documentation: infrastructure requirements, deployment steps, configuration guide, monitoring setup, troubleshooting. Step-by-step deployment guide, configuration documented, monitoring setup clear. docs/DEPLOYMENT.md (~2000 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:25:37.562207-06:00","updated_at":"2025-10-15T08:25:37.562207-06:00"}
{"id":"lift-sys-158","title":"Phase 6.4.1: Beta Program - Run beta program: recruit 20 beta testers, provide training/onboarding, collect feedback, track metrics, fix critical issues. 20 beta testers onboarded, feedback collected, critical bugs fixed, user satisfaction \u003e8/10. Beta test report, bug fixes","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:53.775825-06:00","updated_at":"2025-10-15T08:25:53.775825-06:00","dependencies":[{"issue_id":"lift-sys-158","depends_on_id":"lift-sys-152","type":"blocks","created_at":"2025-10-15T08:25:53.776521-06:00","created_by":"rand"},{"issue_id":"lift-sys-158","depends_on_id":"lift-sys-154","type":"blocks","created_at":"2025-10-15T08:25:53.776745-06:00","created_by":"rand"}]}
{"id":"lift-sys-159","title":"Phase 6.4.2: Production Infrastructure Setup - Set up production infrastructure: production database, Redis cluster, load balancer, CDN for frontend, monitoring (Datadog/Grafana), logging (ELK/Cloudwatch). Infrastructure scalable, monitoring comprehensive, logging centralized, backups automated. Production infrastructure","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:53.950609-06:00","updated_at":"2025-10-15T08:25:53.950609-06:00","dependencies":[{"issue_id":"lift-sys-159","depends_on_id":"lift-sys-157","type":"blocks","created_at":"2025-10-15T08:25:53.951356-06:00","created_by":"rand"}]}
{"id":"lift-sys-160","title":"Phase 6.4.3: Security Audit - Security audit: code review for vulnerabilities, penetration testing, authentication/authorization review, data privacy review, fix critical issues. No critical vulnerabilities, authentication secure, data encrypted, privacy compliant (GDPR, etc.). Security audit report, security fixes","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:54.132455-06:00","updated_at":"2025-10-15T08:25:54.132455-06:00"}
{"id":"lift-sys-161","title":"Phase 6.4.4: Production Deployment - Deploy to production: deploy backend, deploy frontend, configure monitoring, set up alerts, create runbook. Deployment succeeds, all features work, monitoring active, alerts configured. Production deployment, runbook","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:54.311906-06:00","updated_at":"2025-10-15T08:25:54.311906-06:00","dependencies":[{"issue_id":"lift-sys-161","depends_on_id":"lift-sys-158","type":"blocks","created_at":"2025-10-15T08:25:54.312505-06:00","created_by":"rand"},{"issue_id":"lift-sys-161","depends_on_id":"lift-sys-159","type":"blocks","created_at":"2025-10-15T08:25:54.312701-06:00","created_by":"rand"},{"issue_id":"lift-sys-161","depends_on_id":"lift-sys-160","type":"blocks","created_at":"2025-10-15T08:25:54.312861-06:00","created_by":"rand"}]}
{"id":"lift-sys-162","title":"Phase 6.4.5: Post-Launch Support - Post-launch activities: monitor production, fix bugs, respond to user feedback, iterate on features. System stable, bugs fixed quickly, user feedback addressed. Support and maintenance (ongoing)","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:25:54.489631-06:00","updated_at":"2025-10-15T08:25:54.489631-06:00","dependencies":[{"issue_id":"lift-sys-162","depends_on_id":"lift-sys-161","type":"blocks","created_at":"2025-10-15T08:25:54.490624-06:00","created_by":"rand"}]}
{"id":"lift-sys-163","title":"Enhancement 1: Add Confidence Levels to Data Models - Add ConfidenceLevel enum (CERTAIN/HIGH/MEDIUM/LOW/UNKNOWN) to Entity, TypedHole, and Ambiguity classes. Update serialization/deserialization. Improves user trust and suggestion ranking. Files: lift_sys/ir/semantic_models.py (~100 lines). Acceptance: All inference components assign confidence scores, UI displays confidence badges","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T09:10:28.492802-06:00","updated_at":"2025-10-15T09:10:28.492802-06:00","dependencies":[{"issue_id":"lift-sys-163","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T09:10:28.496053-06:00","created_by":"rand"}]}
{"id":"lift-sys-164","title":"Enhancement 2: Classify Inference Rules by Type - Add ReasoningType taxonomy (Symbolic/Commonsense/Heuristic/Fallback). Tag 100+ rules in rule library. Add reasoning_type to InferenceStep. Display in provenance tooltips. Better explainability. Files: lift_sys/refinement/inference_rules.py (~150 lines), rule documentation. Acceptance: All rules tagged, reasoning type shown in UI","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T09:10:28.587483-06:00","updated_at":"2025-10-15T09:10:28.587483-06:00","dependencies":[{"issue_id":"lift-sys-164","depends_on_id":"lift-sys-96","type":"blocks","created_at":"2025-10-15T09:10:28.589587-06:00","created_by":"rand"}]}
{"id":"lift-sys-165","title":"Enhancement 3: Add Inference Depth Tracking - Track reasoning chain length (number of steps). Add depth field to InferenceProvenance. Store in provenance metadata, display in hover tooltips as 'Inferred in N steps'. Helps users gauge complexity. Files: lift_sys/visualization/provenance_tracker.py, lift_sys/refinement/inference_rules.py (~150 lines). Acceptance: Depth tracked for all inferences, displayed in UI","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T09:10:28.681405-06:00","updated_at":"2025-10-15T09:10:28.681405-06:00","dependencies":[{"issue_id":"lift-sys-165","depends_on_id":"lift-sys-97","type":"blocks","created_at":"2025-10-15T09:10:28.683272-06:00","created_by":"rand"},{"issue_id":"lift-sys-165","depends_on_id":"lift-sys-120","type":"blocks","created_at":"2025-10-15T09:10:28.683701-06:00","created_by":"rand"}]}
{"id":"lift-sys-166","title":"Enhancement 4: Enhance RefinementStep Schema - Add step_type (ReasoningType) and confidence (ConfidenceLevel) fields to RefinementStep class. Update all generators to populate structured metadata. Enables machine-readable reasoning chains, automated testing/analysis. Files: lift_sys/ir/semantic_models.py (~50 lines). Acceptance: Schema updated, generators produce structured metadata, exportable JSON","description":"","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T09:10:28.776394-06:00","updated_at":"2025-10-15T09:10:28.776394-06:00","dependencies":[{"issue_id":"lift-sys-166","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T09:10:28.777982-06:00","created_by":"rand"},{"issue_id":"lift-sys-166","depends_on_id":"lift-sys-163","type":"blocks","created_at":"2025-10-15T09:10:28.778412-06:00","created_by":"rand"},{"issue_id":"lift-sys-166","depends_on_id":"lift-sys-164","type":"blocks","created_at":"2025-10-15T09:10:28.778739-06:00","created_by":"rand"}]}
{"id":"lift-sys-167","title":"ACE Enhancement A: Delta-Based IR Updates - Implement incremental delta updates instead of full IR rewrites. Prevents spec collapse. Add IRDelta data model (add/update/remove), apply_delta() function, delta history for undo/redo. Files: lift_sys/ir/delta_operations.py (~300 lines), update lift_sys/refinement/propagation_engine.py. Acceptance: All refinements produce deltas, quality preserved across 5+ iterations, undo/redo works","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T09:58:18.333433-06:00","updated_at":"2025-10-15T09:58:18.333433-06:00","dependencies":[{"issue_id":"lift-sys-167","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T09:58:18.336818-06:00","created_by":"rand"}]}
{"id":"lift-sys-168","title":"ACE Enhancement B: Inference Rule Quality Tracking - Add helpful/harmful counters for self-improving rules. Track user feedback, compute confidence, prioritize high-quality rules, auto-prune low-quality. Files: lift_sys/refinement/inference_rules.py (~100 lines), suggestion_ranker.py (~50 lines). Acceptance: Feedback tracked, confidence accurate, quality improves over 10+ sessions","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T09:58:18.43463-06:00","updated_at":"2025-10-15T09:58:18.43463-06:00","dependencies":[{"issue_id":"lift-sys-168","depends_on_id":"lift-sys-96","type":"blocks","created_at":"2025-10-15T09:58:18.438436-06:00","created_by":"rand"},{"issue_id":"lift-sys-168","depends_on_id":"lift-sys-163","type":"blocks","created_at":"2025-10-15T09:58:18.438971-06:00","created_by":"rand"}]}
{"id":"lift-sys-169","title":"ACE Enhancement C: Three-Role Architecture Refactor - Refactor into ACE's Generator/Reflector/Curator roles. IRGenerator (prompt→IR), IRReflector (quality analysis), IRCurator (suggestions + delta application). Files: lift_sys/refinement/roles.py (~400 lines), update modules. Acceptance: Clear separation, easier testing, functionality preserved, matches ACE pattern","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T09:58:18.535709-06:00","updated_at":"2025-10-15T09:58:18.535709-06:00","dependencies":[{"issue_id":"lift-sys-169","depends_on_id":"lift-sys-107","type":"blocks","created_at":"2025-10-15T09:58:18.537105-06:00","created_by":"rand"},{"issue_id":"lift-sys-169","depends_on_id":"lift-sys-167","type":"blocks","created_at":"2025-10-15T09:58:18.537819-06:00","created_by":"rand"}]}
{"id":"lift-sys-170","title":"Semantic Enhancement 2: Semantic Highlighting in Code Preview","description":"Add semantic highlighting to frontend code preview to distinguish IR-derived code from boilerplate. Custom token types: ir_entity (functions/classes from IR), ir_constraint (assertions from IR), ir_inferred (inferred logic), ir_hole (unresolved), boilerplate (auto-generated). Core to Phase 4 provenance visualization.\n\nImplementation:\n- Backend API: GET /code/{code_id}/semantic-tokens\n- Frontend: SemanticCodeViewer component\n- Token generation from GeneratedCode.metadata\n\nFiles:\n- Backend: lift_sys/api/semantic_tokens.py (~150 lines new)\n- Frontend: src/features/codegen/SemanticCodeViewer.tsx (~200 lines)\n\nEffort: 3-4 days","acceptance_criteria":"Generated code has semantic tokens; UI visually distinguishes IR-derived vs boilerplate; Hover tooltips show provenance links; Users report better understanding (survey \u003e 80%)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T10:35:34.042595-06:00","updated_at":"2025-10-15T10:35:34.042595-06:00","external_ref":"semantic-enhancement-2","dependencies":[{"issue_id":"lift-sys-170","depends_on_id":"lift-sys-121","type":"blocks","created_at":"2025-10-15T10:35:34.044889-06:00","created_by":"rand"},{"issue_id":"lift-sys-170","depends_on_id":"lift-sys-122","type":"blocks","created_at":"2025-10-15T10:35:34.047862-06:00","created_by":"rand"}]}
{"id":"lift-sys-171","title":"Semantic Enhancement 1: Rich Diagnostic Formatting (Ariadne-style)","description":"Adopt Ariadne-style diagnostic formatting for IR ambiguities and errors. Multi-line span annotations with color coding.\n\nExample:\nIR Ambiguity: Missing parameter type\n   ┌─ user_prompt:1:1\n 1 │ send message to user\n   │      ^^^^^^^ What type is 'message'?\n\nImplementation:\n- Backend: lift_sys/diagnostics/ariadne_formatter.py (~200 lines)\n- Frontend: FormattedDiagnostic component\n- API: GET /api/ir/{ir_id}/diagnostics/formatted\n\nEffort: 2-3 days","acceptance_criteria":"All ambiguities formatted with multi-line spans; Color-coded by severity; Clear visual hierarchy; Users report faster comprehension","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T10:35:54.762885-06:00","updated_at":"2025-10-15T10:35:54.762885-06:00","external_ref":"semantic-enhancement-1","dependencies":[{"issue_id":"lift-sys-171","depends_on_id":"lift-sys-123","type":"blocks","created_at":"2025-10-15T10:35:54.765479-06:00","created_by":"rand"}]}
{"id":"lift-sys-172","title":"Semantic Enhancement 4: LSP-Style Diagnostic Severity Levels","description":"Adopt LSP 4-level severity: ERROR (must resolve), WARNING (should resolve), INFO (may resolve), HINT (optional).\n\nUse cases:\n- ERROR: Missing function name (blocks codegen)\n- WARNING: Ambiguous type (should clarify)\n- INFO: Could add constraint (optimization)\n- HINT: Better name (style)\n\nImplementation:\n- DiagnosticSeverity enum in lift_sys/ir/models.py\n- Update Ambiguity, TypedHole with severity field\n- UI color-coding (red/yellow/blue/gray)\n\nFiles: lift_sys/ir/models.py (~50 lines)\n\nEffort: 1 day","acceptance_criteria":"All diagnostics have severity; UI color-codes by severity; Critical issues surfaced first; Users focus on errors (analytics)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T10:35:54.84131-06:00","updated_at":"2025-10-15T10:35:54.84131-06:00","external_ref":"semantic-enhancement-4","dependencies":[{"issue_id":"lift-sys-172","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T10:35:54.843206-06:00","created_by":"rand"}]}
{"id":"lift-sys-173","title":"Semantic Enhancement 3: LSP-Style Code Actions for Suggestions","description":"Structure suggestions as LSP-style code actions with kinds, automated edits, confidence.\n\nCode action kinds:\n- quickfix: Fix ambiguity\n- resolve_hole: Fill typed hole\n- clarify: Add constraint\n- refactor: Restructure IR\n\nSynergy with:\n- ACE Enhancement A (IRDelta for edits)\n- MuSLR Enhancement 1 (confidence levels)\n\nImplementation:\n- Backend: lift_sys/refinement/code_actions.py (~150 lines)\n- Frontend: CodeActionButton for one-click apply\n- API: GET /api/ir/{ir_id}/code-actions\n\nEffort: 2 days","acceptance_criteria":"Suggestions are code actions; Automated delta application works; Categorized by kind; Users prefer one-click fixes (analytics)","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-15T10:35:54.92287-06:00","updated_at":"2025-10-15T10:35:54.92287-06:00","external_ref":"semantic-enhancement-3","dependencies":[{"issue_id":"lift-sys-173","depends_on_id":"lift-sys-167","type":"blocks","created_at":"2025-10-15T10:35:54.925368-06:00","created_by":"rand"},{"issue_id":"lift-sys-173","depends_on_id":"lift-sys-163","type":"blocks","created_at":"2025-10-15T10:35:54.925967-06:00","created_by":"rand"}]}
{"id":"lift-sys-174","title":"Phase 1: Enhance IR generation prompt for explicit edge cases","description":"Modify IR generation prompt to be more explicit about:\n1. Explicit return statements (no implicit None)\n2. Literal values when specified\n3. Edge case handling (empty lists, else clauses)\n\nExpected impact: find_index 80-100%, get_type_name 100%, overall 90-100%","notes":"Phase 1 complete - Enhanced IR generation prompt with 5 critical guidelines","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-15T13:30:10.869228-06:00","updated_at":"2025-10-15T13:34:05.548117-06:00"}
{"id":"lift-sys-175","title":"Phase 2: Add code validation layer with retry","description":"Add post-generation validation to catch common bugs:\n- Check for missing return statements\n- Check for type().__name__ patterns\n- Flag issues and retry with feedback\n\nExpected impact: Robust handling of edge cases","notes":"Phase 2 complete - Added code validation layer","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-15T13:30:11.035839-06:00","updated_at":"2025-10-15T13:34:05.734055-06:00"}
{"id":"lift-sys-176","title":"Phase 3: Multi-shot generation with empirical testing","description":"Implement multi-shot generation:\n- Generate 2-3 implementations\n- Test each against provided test cases\n- Return best scoring implementation\n\nExpected impact: 95-100% success rate through empirical validation","notes":"Phase 3 complete - Implemented multi-shot generation","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-15T13:30:11.184913-06:00","updated_at":"2025-10-15T13:34:05.916947-06:00"}
{"id":"lift-sys-177","title":"Phase 4 v2: Deterministic AST Repair - Verify Results","description":"Verify Phase 4 v2 AST repair improves success rate from 80% baseline. Run Phase 2 tests, measure improvement, document results. Files: lift_sys/codegen/ast_repair.py, test_ast_repair.py","notes":"Phase 4 v2 verification complete. Results: 9/10 (90%), +10% improvement from 80% baseline. Successfully fixed find_index (loop return bug) and count_words. Remaining get_type_name failure is a logic bug, not a pattern bug AST repair targets.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-15T17:18:51.468103-06:00","updated_at":"2025-10-15T18:03:10.787477-06:00"}
{"id":"lift-sys-178","title":"Phase 5: IR Interpreter for Semantic Validation","description":"Implement definitional interpreter for Semantic IR to validate semantics BEFORE code generation. Based on GitHub Semantic's Abstracting Definitional Interpreters approach. Execute IR symbolically to check: control flow validity, hole consistency, type matching, return value correctness. Expected impact: 85-90% success rate. Effort: 2-3 days. Files: lift_sys/ir/interpreter.py (~300 lines)","status":"in_progress","priority":0,"issue_type":"task","created_at":"2025-10-15T17:19:00.319379-06:00","updated_at":"2025-10-15T18:09:13.777746-06:00"}
{"id":"lift-sys-179","title":"Phase 6: Abstract Code Validator for Runtime Safety","description":"Implement abstract interpretation for generated code to detect runtime bugs statically. Based on GitHub Semantic techniques. Checks: array bounds, division by zero, type consistency, unreachable code. Expected impact: 90-95% success rate. Effort: 3-4 days. Dependencies: Phase 5 complete. Files: lift_sys/validation/abstract_validator.py (~400 lines)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T17:19:08.799599-06:00","updated_at":"2025-10-15T17:19:08.799599-06:00","dependencies":[{"issue_id":"lift-sys-179","depends_on_id":"lift-sys-178","type":"blocks","created_at":"2025-10-15T17:19:08.800894-06:00","created_by":"rand"}]}
{"id":"lift-sys-180","title":"Test Infrastructure Setup - Fast Feedback Before Phase 5","description":"Set up layered testing infrastructure for fast feedback loops. Create unit/integration/e2e separation, mocks, pytest config. Estimated 3-4 hours. Deliverables: tests/conftest.py with mocks, pytest.ini, refactored tests, 80% faster feedback. See docs/TEST_STRATEGY_IMPROVEMENTS.md","notes":"Response recording system complete. Created ResponseRecorder, fixtures, example tests, and comprehensive docs. Integration tests can now run 30-60x faster with cached responses.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-15T17:28:59.273756-06:00","updated_at":"2025-10-15T17:50:31.899947-06:00","dependencies":[{"issue_id":"lift-sys-180","depends_on_id":"lift-sys-177","type":"blocks","created_at":"2025-10-15T17:28:59.27515-06:00","created_by":"rand"}]}
{"id":"lift-sys-181","title":"Constraint Propagation for Typed Holes (CSP-based IR Generation)","description":"Implement a Constraint Satisfaction Problem (CSP) solver for typed holes in lift-sys, enabling systematic, constraint-aware hole filling with parallel generation capabilities.\n\nVision: Transform IR generation from ad-hoc text generation into structured constraint solving, treating typed holes like sudoku cells with coordinated dependencies.\n\nKey Components:\n- CSP data structures (HoleCSP, Constraint, HoleVariable)\n- Constraint propagation algorithms (AC-3, forward checking)\n- LLM-based domain generation with llguidance\n- Backtracking solver with parallel generation\n- Integration with XGrammarIRTranslator\n\nTimeline: 6-8 weeks\nEstimated Effort: 120-160 hours\n\nResearch: docs/CONSTRAINT_PROPAGATION_TYPED_HOLES.md\nImplementation Plan: docs/CONSTRAINT_PROPAGATION_IMPLEMENTATION_PLAN.md","status":"open","priority":1,"issue_type":"epic","assignee":"Rand Arete","created_at":"2025-10-16T11:45:55.134106-06:00","updated_at":"2025-10-16T11:45:55.134106-06:00"}
{"id":"lift-sys-182","title":"Phase 0: Foundation and Setup","description":"Establish infrastructure and validate approach for constraint propagation system.\n\nTasks:\n- [x] Research validation (completed)\n- [x] Document architecture (completed)\n- [ ] Review and approve design\n- [ ] Create feature branch: feature/constraint-propagation-holes\n- [ ] Set up module structure (lift_sys/constraint_solver/)\n- [ ] Add dependencies: networkx, llguidance validation\n- [ ] Update pyproject.toml\n\nDeliverable: Clean development environment with approved design\nTimeline: Week 1 (3-4 days)","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:20:42.123924-06:00","updated_at":"2025-10-16T13:20:42.123924-06:00","dependencies":[{"issue_id":"lift-sys-182","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:20:42.126014-06:00","created_by":"rand"}]}
{"id":"lift-sys-183","title":"Phase 1: Core Data Structures","description":"Implement CSP data structures for typed holes.\n\nComponents:\n1. Constraint class - Model constraints between holes\n2. HoleVariable class - CSP variable wrapper for TypedHole\n3. HoleCSP class - Main CSP representation with constraint graph\n\nKey Features:\n- Constraint validation and checking\n- Domain management for variables\n- Constraint graph construction (networkx)\n- Topological ordering for generation\n- Solution validation\n\nFiles:\n- lift_sys/constraint_solver/hole_csp.py\n\nDeliverable: Working CSP representation with constraint graph\nTimeline: Week 2 (5-7 days)\nTests: \u003e90% coverage for CSP data structures","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:20:45.444702-06:00","updated_at":"2025-10-16T13:20:45.444702-06:00","dependencies":[{"issue_id":"lift-sys-183","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:20:45.446034-06:00","created_by":"rand"}]}
{"id":"lift-sys-184","title":"Phase 2: Basic Constraint Propagation","description":"Implement constraint propagation algorithms.\n\nComponents:\n1. Forward Checking - Propagate assignments to dependent holes\n2. Arc Consistency (AC-3) - Full consistency enforcement\n3. Propagation Strategies - Pluggable strategy interface\n\nAlgorithms:\n- forward_check(): Propagate single assignment\n- arc_consistency_3(): Full AC-3 algorithm\n- revise(): Domain filtering for constraint pairs\n\nFiles:\n- lift_sys/constraint_solver/propagation.py\n- lift_sys/constraint_solver/strategies.py\n\nDeliverable: Working constraint propagation with multiple strategies\nTimeline: Week 3 (5-7 days)\nTests: Unit tests for each algorithm, performance tests","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:24:39.616886-06:00","updated_at":"2025-10-16T13:24:39.616886-06:00","dependencies":[{"issue_id":"lift-sys-184","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:24:39.618234-06:00","created_by":"rand"},{"issue_id":"lift-sys-184","depends_on_id":"lift-sys-183","type":"blocks","created_at":"2025-10-16T13:24:39.618564-06:00","created_by":"rand"}]}
{"id":"lift-sys-185","title":"Phase 3: Domain Generation with LLM","description":"Generate hole domains using LLM with llguidance constraint enforcement.\n\nComponents:\n1. llguidance Integration - Add grammar-constrained generation to ModalProvider\n2. GrammarBuilder - Convert TypedHole specs to llguidance grammars\n3. DomainGenerator - Generate candidate values for holes\n\nFeatures:\n- Support for various type hints (str, int, list, dict)\n- Constraint mapping (pattern, enum, range)\n- Context-aware generation (uses current assignments)\n- Caching for repeated hole types\n\nFiles:\n- lift_sys/providers/modal_provider.py (enhance)\n- lift_sys/constraint_solver/grammar.py\n- lift_sys/constraint_solver/domain_generator.py\n\nDeliverable: LLM-based domain generation with llguidance\nTimeline: Week 4 (6-8 days)\nTests: Unit tests, integration tests with Modal provider","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:25:32.579366-06:00","updated_at":"2025-10-16T13:25:32.579366-06:00","dependencies":[{"issue_id":"lift-sys-185","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:25:32.581201-06:00","created_by":"rand"},{"issue_id":"lift-sys-185","depends_on_id":"lift-sys-183","type":"blocks","created_at":"2025-10-16T13:25:32.581559-06:00","created_by":"rand"}]}
{"id":"lift-sys-186","title":"Phase 4: Solver Implementation","description":"Implement complete CSP solver with backtracking search.\n\nComponents:\n1. HoleSolver - Base solver class\n2. Backtracking Search - Main solving algorithm\n3. Variable/Value Heuristics - MCV, LCV, MRV\n4. Solution Validation - Verify complete assignments\n\nFeatures:\n- Timeout handling\n- Search statistics (nodes explored, backtracks)\n- Depth limiting for safety\n- Multiple solving strategies\n- Graceful handling of unsolvable CSPs\n\nFiles:\n- lift_sys/constraint_solver/solver.py\n\nDeliverable: Complete CSP solver with backtracking and validation\nTimeline: Week 5 (6-8 days)\nTests: Unit tests, tests with unsolvable CSPs, integration tests","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:26:48.678814-06:00","updated_at":"2025-10-16T13:26:48.678814-06:00","dependencies":[{"issue_id":"lift-sys-186","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:26:48.680973-06:00","created_by":"rand"},{"issue_id":"lift-sys-186","depends_on_id":"lift-sys-183","type":"blocks","created_at":"2025-10-16T13:26:48.68135-06:00","created_by":"rand"},{"issue_id":"lift-sys-186","depends_on_id":"lift-sys-184","type":"blocks","created_at":"2025-10-16T13:26:48.681717-06:00","created_by":"rand"},{"issue_id":"lift-sys-186","depends_on_id":"lift-sys-185","type":"blocks","created_at":"2025-10-16T13:26:48.681991-06:00","created_by":"rand"}]}
{"id":"lift-sys-187","title":"Phase 5: Parallel Generation","description":"Enable parallel domain generation for independent holes.\n\nComponents:\n1. ParallelHoleSolver - Extended solver with parallel generation\n2. Batch Domain Generation - Generate multiple hole domains simultaneously\n3. Coordination Logic - Manage parallel branches and synchronization\n\nFeatures:\n- Identify independent hole sets at each level\n- Use asyncio.gather for parallel generation\n- Coordinate assignments across parallel holes\n- Concurrency limits (max_parallel parameter)\n- Performance benchmarking\n\nFiles:\n- lift_sys/constraint_solver/parallel_solver.py\n\nDeliverable: Parallel solver with \u003e2x speedup for independent holes\nTimeline: Week 6 (5-7 days)\nTests: Parallel solving tests, benchmark vs sequential, concurrent edge cases","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:27:28.921025-06:00","updated_at":"2025-10-16T13:27:28.921025-06:00","dependencies":[{"issue_id":"lift-sys-187","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:27:28.923623-06:00","created_by":"rand"},{"issue_id":"lift-sys-187","depends_on_id":"lift-sys-186","type":"blocks","created_at":"2025-10-16T13:27:28.924018-06:00","created_by":"rand"}]}
{"id":"lift-sys-188","title":"Phase 6: Integration with lift-sys","description":"Integrate CSP solver with existing IR translation pipeline.\n\nComponents:\n1. ConstrainedIRTranslator - Enhanced translator with automatic hole solving\n2. IR Application Logic - Replace holes with solved values\n3. Configuration System - SolverConfig for tuning\n\nFeatures:\n- Automatic hole detection and solving\n- Fallback to hole clearing if solving fails\n- Configurable solver strategies\n- Metrics and logging\n- Handle edge cases (no holes, unsolvable CSP)\n\nFiles:\n- lift_sys/forward_mode/constrained_ir_translator.py\n- lift_sys/constraint_solver/__init__.py (SolverConfig)\n\nDeliverable: Full integration with lift-sys IR translation\nTimeline: Week 7 (6-8 days)\nTests: Unit tests, integration tests with real prompts, regression tests","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:32:24.546145-06:00","updated_at":"2025-10-16T13:32:24.546145-06:00","dependencies":[{"issue_id":"lift-sys-188","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:32:24.550362-06:00","created_by":"rand"},{"issue_id":"lift-sys-188","depends_on_id":"lift-sys-186","type":"blocks","created_at":"2025-10-16T13:32:24.551449-06:00","created_by":"rand"},{"issue_id":"lift-sys-188","depends_on_id":"lift-sys-187","type":"blocks","created_at":"2025-10-16T13:32:24.552165-06:00","created_by":"rand"}]}
{"id":"lift-sys-189","title":"Phase 7: Testing and Validation","description":"Comprehensive testing and performance validation.\n\nTest Coverage:\n1. Unit Tests - \u003e90% coverage for constraint_solver module\n2. Integration Tests - End-to-end with real prompts\n3. Performance Benchmarks - Measure solving time, speedup, success rate\n4. Example Scenarios - Demonstrate key use cases\n\nMetrics to Measure:\n- Solving time vs number of holes\n- Parallel speedup factor\n- Success rate (solvable CSPs)\n- LLM API calls per solution\n- Comparison against baseline (hole clearing)\n\nFiles:\n- tests/unit/test_*.py (6+ test files)\n- tests/integration/test_constrained_translator.py\n- benchmarks/constraint_solver_benchmarks.py\n\nDeliverable: Fully tested and validated constraint solver\nTimeline: Week 8 (8-10 days)\nSuccess: \u003e85% solving success rate, \u003e90% test coverage","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T13:32:54.242865-06:00","updated_at":"2025-10-16T13:32:54.242865-06:00","dependencies":[{"issue_id":"lift-sys-189","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:32:54.246658-06:00","created_by":"rand"},{"issue_id":"lift-sys-189","depends_on_id":"lift-sys-188","type":"blocks","created_at":"2025-10-16T13:32:54.247158-06:00","created_by":"rand"}]}
{"id":"lift-sys-190","title":"Phase 8: Documentation and Refinement","description":"Production-ready documentation and polish.\n\nDocumentation:\n1. API Documentation - Docstrings for public classes and methods\n2. User Guide - Quick start, configuration, troubleshooting\n3. Developer Guide - Architecture, algorithms, extension points\n4. Migration Guide - How to adopt constraint solver\n\nFiles:\n- docs/CONSTRAINT_SOLVER_USER_GUIDE.md\n- docs/CONSTRAINT_SOLVER_ARCHITECTURE.md\n- docs/MIGRATING_TO_CONSTRAINT_SOLVER.md\n- Inline docstrings in all modules\n\nAdditional Work:\n- Code review and refactoring\n- Performance profiling and optimization\n- Example notebooks/scripts\n\nDeliverable: Complete documentation suite\nTimeline: Ongoing (5-7 days distributed)\nSuccess: Clear documentation, easy onboarding","status":"open","priority":2,"issue_type":"task","assignee":"Rand Arete","created_at":"2025-10-16T13:33:38.155124-06:00","updated_at":"2025-10-16T13:33:38.155124-06:00","dependencies":[{"issue_id":"lift-sys-190","depends_on_id":"lift-sys-181","type":"blocks","created_at":"2025-10-16T13:33:38.157195-06:00","created_by":"rand"},{"issue_id":"lift-sys-190","depends_on_id":"lift-sys-189","type":"blocks","created_at":"2025-10-16T13:33:38.157597-06:00","created_by":"rand"}]}
{"id":"lift-sys-191","title":"Phase 1: Foundation - Infrastructure for Synthetic Data Generation","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.264309-06:00","updated_at":"2025-10-16T14:01:45.916773-06:00","closed_at":"2025-10-16T14:01:45.916773-06:00"}
{"id":"lift-sys-192","title":"Phase 2: Data Generation - SWE-smith-Inspired Synthetic Dataset","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.266879-06:00","updated_at":"2025-10-16T14:01:45.917838-06:00","closed_at":"2025-10-16T14:01:45.917838-06:00"}
{"id":"lift-sys-193","title":"Phase 3: Test Expansion - Programmatic Test Generation","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.267192-06:00","updated_at":"2025-10-16T14:01:45.918358-06:00","closed_at":"2025-10-16T14:01:45.918358-06:00"}
{"id":"lift-sys-194","title":"Phase 4: Model Fine-Tuning - SWE-smith Methodology","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.267493-06:00","updated_at":"2025-10-16T14:01:45.918775-06:00","closed_at":"2025-10-16T14:01:45.918775-06:00"}
{"id":"lift-sys-195","title":"Phase 5: Integration - Deploy Fine-Tuned Model","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.267881-06:00","updated_at":"2025-10-16T14:01:45.919064-06:00","closed_at":"2025-10-16T14:01:45.919064-06:00"}
{"id":"lift-sys-196","title":"Phase 6: Evaluation \u0026 Iteration","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.268169-06:00","updated_at":"2025-10-16T14:01:45.919358-06:00","closed_at":"2025-10-16T14:01:45.919358-06:00"}
{"id":"lift-sys-197","title":"Phase 7: Continuous Improvement Loop","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.268522-06:00","updated_at":"2025-10-16T14:01:45.919768-06:00","closed_at":"2025-10-16T14:01:45.919768-06:00"}
{"id":"lift-sys-198","title":"Summary: Integration Points with Existing lift-sys Design","description":"","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.270557-06:00","updated_at":"2025-10-16T14:01:45.920241-06:00","closed_at":"2025-10-16T14:01:45.920241-06:00"}
{"id":"lift-sys-199","title":"Dependencies (Bead Chain)","description":"```","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.270831-06:00","updated_at":"2025-10-16T14:01:45.920417-06:00","closed_at":"2025-10-16T14:01:45.920417-06:00"}
{"id":"lift-sys-200","title":"Estimated Timeline \u0026 Resources","description":"**Week 1-2**: Foundation + Data Generation (lift-sys-200 to lift-sys-206)","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.271101-06:00","updated_at":"2025-10-16T14:01:45.920584-06:00","closed_at":"2025-10-16T14:01:45.920584-06:00"}
{"id":"lift-sys-201","title":"Conclusion","description":"This plan integrates SWE-smith's proven synthetic data generation and fine-tuning methodologies with lift-sys's existing strengths:","status":"closed","priority":2,"issue_type":"task","created_at":"2025-10-16T13:59:47.271366-06:00","updated_at":"2025-10-16T14:01:45.920764-06:00","closed_at":"2025-10-16T14:01:45.920764-06:00"}
{"id":"lift-sys-202","title":"lift-sys-200: Design GitHub Data Collection Architecture","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.152879-06:00","updated_at":"2025-10-16T14:01:50.152879-06:00"}
{"id":"lift-sys-203","title":"lift-sys-201: Implement GitHub Repository Scraper","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.154088-06:00","updated_at":"2025-10-16T14:01:50.154088-06:00"}
{"id":"lift-sys-204","title":"lift-sys-202: Enhance Reverse Mode for Batch Processing","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.154463-06:00","updated_at":"2025-10-16T14:01:50.154463-06:00"}
{"id":"lift-sys-205","title":"lift-sys-203: Implement Prompt Synthesis from Code","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.155311-06:00","updated_at":"2025-10-16T14:01:50.155311-06:00"}
{"id":"lift-sys-206","title":"lift-sys-204: Implement Training Data Pipeline","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.155851-06:00","updated_at":"2025-10-16T14:01:50.155851-06:00"}
{"id":"lift-sys-207","title":"lift-sys-205: Implement SWE-smith-Style Execution Validator","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.156204-06:00","updated_at":"2025-10-16T14:01:50.156204-06:00"}
{"id":"lift-sys-208","title":"lift-sys-206: Run Initial Dataset Generation","description":"**Type**: milestone","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.156569-06:00","updated_at":"2025-10-16T14:01:50.156569-06:00"}
{"id":"lift-sys-209","title":"lift-sys-207: Design Template-Based Test Generator","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.156956-06:00","updated_at":"2025-10-16T14:01:50.156956-06:00"}
{"id":"lift-sys-210","title":"lift-sys-208: Implement Programmatic Test Generator","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.157308-06:00","updated_at":"2025-10-16T14:01:50.157308-06:00"}
{"id":"lift-sys-211","title":"lift-sys-209: Validate and Integrate Generated Test Suite","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.157637-06:00","updated_at":"2025-10-16T14:01:50.157637-06:00"}
{"id":"lift-sys-212","title":"lift-sys-210: Prepare Training Data for LoRA Fine-Tuning","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.157934-06:00","updated_at":"2025-10-16T14:01:50.157934-06:00"}
{"id":"lift-sys-213","title":"lift-sys-211: Set Up Modal LoRA Training Infrastructure","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.158468-06:00","updated_at":"2025-10-16T14:01:50.158468-06:00"}
{"id":"lift-sys-214","title":"lift-sys-212: Execute LoRA Fine-Tuning","description":"**Type**: milestone","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.158895-06:00","updated_at":"2025-10-16T14:01:50.158895-06:00"}
{"id":"lift-sys-215","title":"lift-sys-213: Validate Fine-Tuned Model Performance","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.159187-06:00","updated_at":"2025-10-16T14:01:50.159187-06:00"}
{"id":"lift-sys-216","title":"lift-sys-214: Integrate LoRA Weights with Modal Inference","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.159863-06:00","updated_at":"2025-10-16T14:01:50.159863-06:00"}
{"id":"lift-sys-217","title":"lift-sys-215: Implement A/B Testing Framework","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.160167-06:00","updated_at":"2025-10-16T14:01:50.160167-06:00"}
{"id":"lift-sys-218","title":"lift-sys-216: Update Provider System for Fine-Tuned Model","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.160817-06:00","updated_at":"2025-10-16T14:01:50.160817-06:00"}
{"id":"lift-sys-219","title":"lift-sys-217: Run Comprehensive Evaluation on Expanded Test Suite","description":"**Type**: milestone","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.161102-06:00","updated_at":"2025-10-16T14:01:50.161102-06:00"}
{"id":"lift-sys-220","title":"lift-sys-218: Analyze Failure Modes and Iterate","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.161512-06:00","updated_at":"2025-10-16T14:01:50.161512-06:00"}
{"id":"lift-sys-221","title":"lift-sys-219: Document SWE-smith Integration Results","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.161827-06:00","updated_at":"2025-10-16T14:01:50.161827-06:00"}
{"id":"lift-sys-222","title":"lift-sys-220: Implement Continuous Data Collection","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.162107-06:00","updated_at":"2025-10-16T14:01:50.162107-06:00"}
{"id":"lift-sys-223","title":"lift-sys-221: Implement Model Versioning and Registry","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.164389-06:00","updated_at":"2025-10-16T14:01:50.164389-06:00"}
{"id":"lift-sys-224","title":"lift-sys-222: Set Up Retraining Pipeline","description":"**Type**: task","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-16T14:01:50.164718-06:00","updated_at":"2025-10-16T14:01:50.164718-06:00"}
{"id":"lift-sys-225","title":"ast-grep Integration for Pattern-Based Code Operations","description":"Integrate ast-grep into lift-sys for pattern-based code repair, validation, and reverse mode (code-to-IR extraction).\n\nVision: Enhance code generation pipeline with declarative pattern-based transformations using ast-grep's structural matching capabilities.\n\nKey Components:\n- Pattern-based code repair (replace hardcoded AST fixes)\n- Pattern-based validation (semantic error detection)\n- Reverse mode foundation (extract IR from code)\n- Pattern library (YAML-based repair and validation rules)\n\nTimeline: 4-6 weeks (3 phases)\nEstimated Effort: 80-120 hours\n\nSuccess Metrics:\n- \u003e95% code repair success rate (vs 90% baseline)\n- \u003e98% validation accuracy\n- \u003c5% false positive rate\n- Extract IR from 80%+ of benchmark functions\n\nDocumentation: docs/AST_GREP_INTEGRATION_PLAN.md\nEvaluation: docs/STRUCTURAL_PATTERN_MATCHING_EVALUATION.md","status":"open","priority":1,"issue_type":"epic","assignee":"Rand Arete","created_at":"2025-10-16T21:33:41.959934-06:00","updated_at":"2025-10-16T21:33:41.959934-06:00"}
{"id":"lift-sys-226","title":"Phase 1: Pattern-Based Code Repair","description":"Replace hardcoded AST transformations with declarative pattern-based repairs using ast-grep.\n\nComponents:\n1. Infrastructure Setup (Days 1-2)\n   - Install ast-grep-cli and ast-grep-py\n   - Create module structure (lift_sys/repair/)\n   - Set up pattern library format (YAML)\n\n2. Core Pattern Repair Engine (Days 3-5)\n   - Implement PatternRepairEngine class\n   - Support library API and CLI fallback\n   - Add condition checking and statistics\n\n3. Built-in Repair Patterns (Days 6-8)\n   - Create type_checking.yaml (5-8 patterns)\n   - Create common.yaml (3-5 patterns)\n   - Test on Phase 3 failures\n\n4. Integration with Existing Repair (Days 9-10)\n   - Enhance ast_repair.py\n   - Pattern-first repair pipeline\n   - Maintain backward compatibility\n\n5. Testing and Validation (Days 11-14)\n   - Unit tests (\u003e15 tests, \u003e90% coverage)\n   - Integration tests (\u003e5 tests)\n   - Benchmark against baseline\n   - Measure success rate improvement\n\nDeliverable: Pattern-based repair with \u003e95% success rate\nTimeline: Week 1-2 (14 days)\nSuccess: Improve repair from 90% to 95%+","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T21:34:13.112071-06:00","updated_at":"2025-10-16T21:34:13.112071-06:00","dependencies":[{"issue_id":"lift-sys-226","depends_on_id":"lift-sys-225","type":"blocks","created_at":"2025-10-16T21:34:13.11569-06:00","created_by":"rand"}]}
{"id":"lift-sys-227","title":"Phase 2: Pattern-Based Validation","description":"Add pattern-based validation to catch semantic errors early in the generation pipeline.\n\nComponents:\n1. Pattern Validator Infrastructure (Days 1-3)\n   - Implement PatternValidator class\n   - Support violation patterns (should NOT match)\n   - Support required patterns (SHOULD match)\n   - Add severity levels (error, warning, info)\n\n2. Validation Pattern Library (Days 4-6)\n   - Create type_checking.yaml (8-10 patterns)\n   - Create general.yaml (5-7 patterns)\n   - Test patterns on generated code\n\n3. Integration with Code Generation (Days 7-9)\n   - Enhance xgrammar_generator.py\n   - Add pattern validation before AST repair\n   - Provide feedback for violations\n   - Track validation metrics\n\n4. Testing and Benchmarking (Days 10-14)\n   - Unit tests (\u003e20 tests, \u003e90% coverage)\n   - Integration tests (\u003e10 tests)\n   - Measure validation accuracy (precision, recall)\n   - Benchmark false positive rate\n   - Compare with baseline validation\n\nDeliverable: Pattern validation with \u003e98% accuracy, \u003c5% false positives\nTimeline: Week 3-4 (14 days)\nSuccess: Reduce retries by 30%+, improve validation accuracy","status":"open","priority":1,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T21:34:27.436506-06:00","updated_at":"2025-10-16T21:34:27.436506-06:00","dependencies":[{"issue_id":"lift-sys-227","depends_on_id":"lift-sys-225","type":"blocks","created_at":"2025-10-16T21:34:27.440044-06:00","created_by":"rand"},{"issue_id":"lift-sys-227","depends_on_id":"lift-sys-226","type":"blocks","created_at":"2025-10-16T21:34:27.44042-06:00","created_by":"rand"}]}
{"id":"lift-sys-228","title":"Phase 3: Reverse Mode Foundation","description":"Extract IntermediateRepresentation from existing Python code using ast-grep patterns.\n\nComponents:\n1. IR Extraction Patterns (Days 1-4)\n   - Create extraction_patterns.yaml\n   - Define signature extraction patterns\n   - Define effect extraction patterns\n   - Define assertion extraction patterns\n   - Implement IRExtractor class\n\n2. Testing and Validation (Days 5-8)\n   - Unit tests (\u003e15 tests, \u003e70% coverage)\n   - Test on benchmark functions\n   - Measure extraction accuracy\n   - Compare with hand-written IR\n\n3. Documentation and Examples (Days 9-14)\n   - Write reverse mode user guide\n   - Create extraction examples\n   - Document limitations\n   - Add troubleshooting guide\n\nDeliverable: Extract IR from 80%+ of benchmark functions\nTimeline: Week 5-6 (14 days)\nSuccess: Enable constraint mining and learning from codebases\n\nNote: This is foundational work for future constraint mining and \nbidirectional translation capabilities.","status":"open","priority":2,"issue_type":"feature","assignee":"Rand Arete","created_at":"2025-10-16T21:34:38.408111-06:00","updated_at":"2025-10-16T21:34:38.408111-06:00","dependencies":[{"issue_id":"lift-sys-228","depends_on_id":"lift-sys-225","type":"blocks","created_at":"2025-10-16T21:34:38.412145-06:00","created_by":"rand"},{"issue_id":"lift-sys-228","depends_on_id":"lift-sys-227","type":"blocks","created_at":"2025-10-16T21:34:38.412792-06:00","created_by":"rand"}]}
{"id":"lift-sys-229","title":"Phase 7 Constraint Detection - Validation Complete","description":"\n## Session Summary\n\n### Fixes Implemented\n1. **IndentationError Bug** (xgrammar_generator.py:130)\n   - Root cause: Error stub generating invalid Python\n   - Fix: Changed error message formatting to use comment prefix\n   - Impact: Resolved 0/10 catastrophic regression\n   \n2. **Semantic Applicability Filtering** (constraints.py + constraint_validator.py)\n   - Added is_semantically_applicable() to PositionConstraint\n   - Filters spurious position constraints on parameter names in arithmetic\n   - Committed: hash 4439978\n\n### Validation Results\n- clamp_value: NOW PASSING (5/5 tests, 3 consistent attempts)\n- Latest Phase 2: 80% overall (8/10) from Oct 17 log (before fixes)\n- Expected current: ~90% with both fixes applied\n\n### Remaining Issues\n1. letter_grade: LLM JSON generation error (infrastructure, not Phase 7)\n   - Error: 'Expecting \",\" delimiter: line 23 column 4'\n   - Not a constraint detection issue\n\n### Phase 7 Status\n✅ COMPLETE - Constraint detection working at expected level\n- Spurious warnings suppressed\n- Code generation fixed\n- Validation framework operational\n\n## Next Steps\n1. Run fresh Phase 2 validation to confirm 90%+ pass rate\n2. Document Phase 7 improvements\n3. Move to Phase 8 (enhanced constraint types) or other priorities\n","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-17T20:41:34.231974-06:00","updated_at":"2025-10-17T20:41:34.231974-06:00"}
{"id":"lift-sys-230","title":"Parallel benchmark execution with per-test isolation","description":"Modify performance_benchmark.py to support parallel test execution using per-test isolation (Option 2) to avoid race conditions while maintaining accurate measurements.\n\nContext: Current implementation has race conditions with tracemalloc global state, self.results list, debug file paths, and result timestamps.\n\nSolution: Create isolated benchmark instances per test, run in batches matching Modal concurrency (4).\n\nWill create sub-beads for: parallel runner, isolated instances, result aggregation, CLI flag, testing, docs.","acceptance_criteria":"Tests run in parallel (batch=4), no race conditions, memory profiling accurate, results aggregated correctly, ~4x speedup, all functionality preserved","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:39:32.559066-06:00","updated_at":"2025-10-18T07:53:11.307446-06:00","closed_at":"2025-10-18T07:53:11.307446-06:00"}
{"id":"lift-sys-231","title":"Add run_parallel_benchmarks() function with batch execution","description":"Create new function that runs tests in parallel batches. Takes test_cases, provider, max_concurrency. Creates isolated PerformanceBenchmark instance per test. Uses asyncio.gather() for parallel execution. Handles batching to respect Modal concurrency limits.","acceptance_criteria":"Function works with batch_size parameter, creates isolated instances, returns list of BenchmarkResult objects","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:39:39.237945-06:00","updated_at":"2025-10-18T07:44:07.803214-06:00","closed_at":"2025-10-18T07:44:07.803214-06:00","dependencies":[{"issue_id":"lift-sys-231","depends_on_id":"lift-sys-230","type":"blocks","created_at":"2025-10-18T07:39:39.23935-06:00","created_by":"rand"}]}
{"id":"lift-sys-232","title":"Add result aggregation to generate unified summary","description":"Create aggregate_results() function that combines results from multiple isolated benchmark instances. Merges BenchmarkResult lists. Generates single BenchmarkSummary with correct statistics. Preserves all timing and cost data.","acceptance_criteria":"Aggregation produces correct mean/median/std across all results, cost totals accurate, summary statistics match sequential mode","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:39:45.098674-06:00","updated_at":"2025-10-18T07:44:07.894859-06:00","closed_at":"2025-10-18T07:44:07.894859-06:00","dependencies":[{"issue_id":"lift-sys-232","depends_on_id":"lift-sys-230","type":"blocks","created_at":"2025-10-18T07:39:45.099728-06:00","created_by":"rand"},{"issue_id":"lift-sys-232","depends_on_id":"lift-sys-231","type":"blocks","created_at":"2025-10-18T07:39:45.100212-06:00","created_by":"rand"}]}
{"id":"lift-sys-233","title":"Add --parallel CLI flag and update main()","description":"Add argparse with --parallel flag and --max-workers option. Update main() to use run_parallel_benchmarks() when flag set. Default to sequential mode (backward compatible). Add --suite flag to select test suite.","acceptance_criteria":"CLI accepts --parallel and --max-workers flags, backward compatible with no flags, help text clear","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:39:52.619916-06:00","updated_at":"2025-10-18T07:45:23.537424-06:00","closed_at":"2025-10-18T07:45:23.537424-06:00","dependencies":[{"issue_id":"lift-sys-233","depends_on_id":"lift-sys-230","type":"blocks","created_at":"2025-10-18T07:39:52.621021-06:00","created_by":"rand"},{"issue_id":"lift-sys-233","depends_on_id":"lift-sys-231","type":"blocks","created_at":"2025-10-18T07:39:52.62185-06:00","created_by":"rand"},{"issue_id":"lift-sys-233","depends_on_id":"lift-sys-232","type":"blocks","created_at":"2025-10-18T07:39:52.624132-06:00","created_by":"rand"}]}
{"id":"lift-sys-234","title":"Test parallel execution with Phase 2 test suite","description":"Run parallel benchmarks with Phase 2 nontrivial test suite. Compare results vs sequential mode (timing should differ, but success rates should match). Verify no file corruption or missing results. Measure actual speedup achieved.","acceptance_criteria":"Parallel mode completes successfully, results match sequential mode quality, speedup 3-4x, no errors or warnings","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:39:58.541911-06:00","updated_at":"2025-10-18T07:53:03.973592-06:00","closed_at":"2025-10-18T07:53:03.973592-06:00","dependencies":[{"issue_id":"lift-sys-234","depends_on_id":"lift-sys-230","type":"blocks","created_at":"2025-10-18T07:39:58.542854-06:00","created_by":"rand"},{"issue_id":"lift-sys-234","depends_on_id":"lift-sys-233","type":"blocks","created_at":"2025-10-18T07:39:58.543329-06:00","created_by":"rand"}]}
{"id":"lift-sys-235","title":"Update benchmark documentation for parallel mode","description":"Add parallel mode usage to performance_benchmark.py docstring. Document --parallel and --max-workers flags. Explain when to use parallel vs sequential. Note memory profiling behavior in parallel mode. Add example commands.","acceptance_criteria":"Documentation clear and comprehensive, examples work, trade-offs explained","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-18T07:40:03.454743-06:00","updated_at":"2025-10-18T07:53:11.228629-06:00","closed_at":"2025-10-18T07:53:11.228629-06:00","dependencies":[{"issue_id":"lift-sys-235","depends_on_id":"lift-sys-230","type":"blocks","created_at":"2025-10-18T07:40:03.45594-06:00","created_by":"rand"},{"issue_id":"lift-sys-235","depends_on_id":"lift-sys-234","type":"blocks","created_at":"2025-10-18T07:40:03.456484-06:00","created_by":"rand"}]}
{"id":"lift-sys-58","title":"Test Modal inference endpoint end-to-end","description":"Verify Modal endpoint works by sending real IR generation request. Test cold start latency, warm request latency, validate JSON schema output. Document findings.","design":"**Test Results - Completed October 15, 2025**\n\n**Stack Tested**:\n- vLLM 0.9.2 + XGrammar 0.1.19 + FlashInfer 0.4.1\n- Qwen2.5-Coder-7B-Instruct on A10G GPU\n- transformers 4.53.0, CUDA 12.4.1\n\n**Performance Results**:\n- Cold start: ~211s model loading\n- Warm request: 3.49s (100 tokens, ~28.7 tps)\n- Baseline improvement: ~40-45% faster with FlashInfer\n- Schema validation: ✅ Perfect compliance\n\n**Production Status**: ✅ READY\n- Endpoints operational\n- Documentation complete (4 reference docs)\n- Future upgrades documented in beads lift-sys-66/67/68","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T17:35:09.661844-06:00","updated_at":"2025-10-14T22:43:59.838086-06:00"}
{"id":"lift-sys-59","title":"Implement real Forward Mode E2E test","description":"Create ONE genuine end-to-end test: NLP prompt → IR (with real LLM) → Python code (with real LLM). Validate code compiles and runs. No mocks.","notes":"✅ COMPLETE - E2E test proven! NLP→IR (11s) → Code (10.7s) → Compile ✓ → Execute ✓. Test 2 (factorial) completed full pipeline. Known issues: indentation assembly for nested blocks, LLM logic quality. See E2E_TEST_RESULTS.md for details.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T17:35:15.000831-06:00","updated_at":"2025-10-15T07:52:21.741823-06:00"}
{"id":"lift-sys-60","title":"Fix 40+ failing xgrammar tests","description":"Diagnose why xgrammar tests fail. Fix provider configuration. Ensure constrained generation works with real LLM.","notes":"✅ COMPLETE - Fixed from 16→1 failures (93.75% pass rate). Root cause: MockProvider had capabilities=None. Fixed both test files. Remaining 1 failure is indentation bug (lift-sys-69). Week 1 goal achieved: \u003c15 failures.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T17:35:18.772763-06:00","updated_at":"2025-10-15T07:56:50.23224-06:00"}
{"id":"lift-sys-61","title":"Update documentation to match reality","description":"Honest assessment in README. Mark unfinished features as 'Planned'. Provide working examples (not stubs). Update MASTER_PLAN with real status.","notes":"✅ COMPLETE - Updated README with Current Status section showing what actually works. Updated REALITY_CHECK_AND_PLAN.md with Week 1 achievements. Created E2E_TEST_RESULTS.md and LIFT_SYS_59_COMPLETE.md with detailed proof of working pipeline.","status":"closed","priority":0,"issue_type":"task","created_at":"2025-10-14T17:35:22.873685-06:00","updated_at":"2025-10-15T07:59:05.906674-06:00"}
{"id":"lift-sys-62","title":"Fix failing session management tests","description":"Debug 25 failing session tests. Ensure hole resolution, assists, and finalization work properly. Fix provider integration issues.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-14T17:35:25.379558-06:00","updated_at":"2025-10-14T17:35:25.379558-06:00"}
{"id":"lift-sys-63","title":"Fix LSP cache and metrics tests","description":"Resolve 45 failing LSP cache/metrics tests. Fix test isolation issues. Ensure LSP infrastructure works reliably.","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-14T17:35:28.962597-06:00","updated_at":"2025-10-14T17:35:28.962597-06:00"}
{"id":"lift-sys-64","title":"Performance benchmarking and cost analysis","description":"Measure real latencies: IR generation, code generation, end-to-end. Calculate cost per request. Document Modal cold/warm start times.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-14T17:35:32.157104-06:00","updated_at":"2025-10-15T08:53:10.296312-06:00"}
{"id":"lift-sys-65","title":"Real reverse mode E2E test","description":"Extract IR from real Python file. Validate IR quality. Test whole-project mode on small repo. Document extraction accuracy.","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T17:35:34.406218-06:00","updated_at":"2025-10-14T17:35:34.406218-06:00"}
{"id":"lift-sys-66","title":"Upgrade Modal inference to Qwen3-Coder-30B-A3B-Instruct-FP8","description":"**Context**: Currently using Qwen2.5-Coder-7B on A10G GPU (~$1.10/hr). When quality improvements justify cost increase, upgrade to Qwen3-Coder-30B-A3B-Instruct-FP8.\n\n**Implementation**:\n- Model: Qwen/Qwen3-Coder-30B-A3B-Instruct-FP8\n- GPU: A100-40GB (~$3/hr, 2.7x cost increase)\n- Add: os.environ[\"VLLM_USE_DEEP_GEMM\"] = \"1\" for FP8 optimization\n- vLLM: 0.9.2 (already compatible)\n- Context: 256K available, use 32K for IR generation\n- Same XGrammar + FlashInfer stack\n\n**Before Testing**:\n- Run representative IR prompts with current setup\n- Establish quality baseline metrics\n- Calculate cost per request\n\n**Testing**:\n- Side-by-side quality comparison\n- Measure latency differences\n- Cost/benefit analysis\n\n**Success Criteria**:\n- Quality improvement \u003e 20%\n- Latency \u003c 10s per request\n- Cost increase justified by quality gains\n\n**Documentation**: See docs/QWEN3_CODER_GUIDE.md for complete implementation","acceptance_criteria":"IR generation quality measurably improved compared to Qwen2.5-7B baseline","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T22:42:14.230833-06:00","updated_at":"2025-10-14T22:42:14.230833-06:00"}
{"id":"lift-sys-67","title":"Test Unsloth Qwen3-Coder dynamic quantized variants","description":"**Context**: Unsloth provides Dynamic 2.0 GGUF (quantized) versions of Qwen3-Coder that nearly match full precision performance with lower VRAM requirements.\n\n**Models Available**:\n- Qwen3-Coder-30B-A3B-Instruct-Dynamic (18GB VRAM vs 30GB FP8)\n- Qwen3-Coder-480B-A35B-Instruct-Dynamic (150GB VRAM vs 240GB+ full precision)\n\n**Benefits**:\n- Lower VRAM requirements (potential to fit 30B on smaller GPUs)\n- Minimal performance degradation vs full precision\n- Multiple quantization levels (Q2_K_XL, Q4_K_XL, etc.)\n- 256K context, extendable to 1M\n\n**Testing Approach**:\n1. Start with 30B Dynamic variant\n2. Compare quality against FP8 version\n3. Measure latency differences\n4. Test if can fit on A10G/L40S (cheaper than A100)\n\n**Recommended Settings** (from Unsloth docs):\n- Temperature: 0.7\n- Top_P: 0.8\n- Top_K: 20\n- Repetition Penalty: 1.05\n\n**Integration**:\n- May require different serving approach (llama.cpp vs vLLM)\n- Research Modal compatibility with GGUF models\n- Consider if quality/cost tradeoff worth the integration complexity\n\n**Documentation**: https://docs.unsloth.ai/models/qwen3-coder-how-to-run-locally","acceptance_criteria":"Determined if Unsloth dynamic variants provide better cost/performance tradeoff than FP8","status":"open","priority":3,"issue_type":"task","created_at":"2025-10-14T22:42:30.548096-06:00","updated_at":"2025-10-14T22:42:30.548096-06:00"}
{"id":"lift-sys-68","title":"Test SGLang for 3-10x faster constrained IR generation","description":"**Context**: SGLang provides 3-10x faster constrained generation vs vLLM due to RadixAttention and optimized XGrammar backend. Now confirmed working with Qwen3-Coder (LMSYS announcement July 2025).\n\n**Working Configuration** (Modal tested):\n- SGLang: 0.4.10.post2 (minimum 0.4.6.post1)\n- CUDA: 12.8.0\n- Python: 3.11\n- transformers: 4.54.1\n- torch: 2.7.1\n\n**Previous Issue**: sgl_kernel ImportError on H100 - RESOLVED in newer versions\n\n**Implementation**:\n1. Create separate Modal app with SGLang stack\n2. Use Modal's exact configuration from docs/examples/sgl_vlm\n3. Deploy Qwen3-Coder-30B-A3B-Instruct-FP8\n4. Enable tool call parser and expert parallelism\n\n**Testing**:\n- Compare latency against vLLM (expect 3-10x faster)\n- Verify XGrammar schema compliance\n- Measure throughput improvement\n- Calculate cost per request vs vLLM\n\n**When to Do This**:\n- If request volume justifies optimization effort\n- If latency becomes critical (\u003e 5s not acceptable)\n- After establishing that quality is sufficient with current model\n\n**Decision Criteria**:\n- Performance improvement \u003e= 3x\n- Same quality as vLLM\n- Deployment complexity acceptable\n- Cost per request significantly lower despite same GPU\n\n**Documentation**: docs/QWEN3_CODER_GUIDE.md, docs/SGLANG_MODAL_ISSUES.md","acceptance_criteria":"SGLang deployment working with 3x+ faster generation vs vLLM while maintaining quality","status":"open","priority":2,"issue_type":"task","created_at":"2025-10-14T22:42:48.729308-06:00","updated_at":"2025-10-14T22:42:48.729308-06:00"}
{"id":"lift-sys-69","title":"Fix code assembly indentation for nested control flow","description":"The _combine_structure_and_implementation method in xgrammar_generator.py has issues with nested if/for blocks. Comments and statements after control flow keywords don't get proper indentation. Need smarter indentation tracking or use Python AST to format code properly.","notes":"✅ COMPLETE - Simplified indentation logic in xgrammar_generator.py. Now handles multiline code (preserves internal indentation) and single-line code (adds function indent) correctly. All 16/16 xgrammar tests passing (100%). Changed from 93.75% to 100% pass rate.","status":"closed","priority":1,"issue_type":"task","created_at":"2025-10-15T07:52:28.528727-06:00","updated_at":"2025-10-15T08:11:29.764319-06:00"}
{"id":"lift-sys-70","title":"Phase 1.1.1: Enhanced IR Data Models","description":"Implement all semantic metadata classes in lift_sys/ir/semantic_models.py: Entity, EntityType, SemanticType, Span, Relationship, TypedHole, Ambiguity, ImplicitTerm, Intent, SemanticMetadata, AnnotationLayer, RefinementState, EnhancedIR. Include JSON serialization (to_dict/from_dict) and comprehensive unit tests. Acceptance: All classes with docstrings, type hints pass mypy --strict, 100% test coverage, no data loss in serialization.","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:11:58.271968-06:00","updated_at":"2025-10-15T08:11:58.271968-06:00"}
{"id":"lift-sys-71","title":"Phase 1.1.2: Database Schema for Semantic IR","description":"Create Alembic migration for new tables: semantic_metadata, entities, relationships, typed_holes, ambiguities, refinement_history. Add indexes for session_id, entity_id. Use JSON columns for flexible metadata. Acceptance: Migration applies cleanly, efficient queries (\u003c100ms), supports concurrent writes","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:12:15.792881-06:00","updated_at":"2025-10-15T08:12:15.792881-06:00","dependencies":[{"issue_id":"lift-sys-71","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T08:12:15.793583-06:00","created_by":"rand"}]}
{"id":"lift-sys-72","title":"Phase 1.1.3: API Endpoints for Semantic IR","description":"Add API endpoints: POST /api/sessions/{id}/analyze, GET /api/sessions/{id}/semantic, POST /api/sessions/{id}/resolve-hole, POST /api/sessions/{id}/resolve-ambiguity, GET /api/sessions/{id}/annotations. Use Pydantic models, OpenAPI docs, auth, rate limiting. Acceptance: All endpoints documented, error handling, tests pass","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:12:15.801056-06:00","updated_at":"2025-10-15T08:12:15.801056-06:00","dependencies":[{"issue_id":"lift-sys-72","depends_on_id":"lift-sys-71","type":"blocks","created_at":"2025-10-15T08:12:15.801898-06:00","created_by":"rand"}]}
{"id":"lift-sys-73","title":"Phase 1.2.1: NLP Infrastructure Setup","description":"Set up NLP pipeline: install spaCy (uv add spacy), download model (en_core_web_sm), create NLPPipeline wrapper, implement Redis caching for parsed documents, performance monitoring. Acceptance: Pipeline initializes, parsing works, caching reduces time 90%+, monitoring tracks parse time","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:12:15.809691-06:00","updated_at":"2025-10-15T08:12:15.809691-06:00"}
{"id":"lift-sys-74","title":"Phase 1.2.2: Tokenization and POS Tagging","description":"Implement tokenization with metadata: Token class (span, POS, lemma), TokenizedPrompt class, track character offsets, handle Unicode. Acceptance: Accurate tokenization, preserves offsets, 95%+ POS accuracy, handles special characters","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:12:15.817687-06:00","updated_at":"2025-10-15T08:12:15.817687-06:00","dependencies":[{"issue_id":"lift-sys-74","depends_on_id":"lift-sys-73","type":"blocks","created_at":"2025-10-15T08:12:15.818378-06:00","created_by":"rand"}]}
{"id":"lift-sys-75","title":"Phase 1.2.3: Noun Phrase Extraction","description":"Extract entities from noun phrases: use spaCy noun chunks, filter determiners, create Entity objects, assign initial semantic types. Files: lift_sys/nlp/entity_extractor.py (~250 lines). Acceptance: Extracts all major noun phrases, creates correct Entity objects with spans","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:13:45.597286-06:00","updated_at":"2025-10-15T08:13:45.597286-06:00","dependencies":[{"issue_id":"lift-sys-75","depends_on_id":"lift-sys-74","type":"blocks","created_at":"2025-10-15T08:13:45.598069-06:00","created_by":"rand"}]}
{"id":"lift-sys-76","title":"Phase 1.2.4: Coreference Resolution","description":"Resolve pronouns and references: try NeuralCoref, implement rule-based fallback (track pronouns, find antecedents), handle definite articles. Files: lift_sys/nlp/coreference_resolver.py (~300 lines). Acceptance: 90%+ accuracy on 'Create X and process it', fallback works","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:13:45.607018-06:00","updated_at":"2025-10-15T08:13:45.607018-06:00","dependencies":[{"issue_id":"lift-sys-76","depends_on_id":"lift-sys-75","type":"blocks","created_at":"2025-10-15T08:13:45.607652-06:00","created_by":"rand"}]}
{"id":"lift-sys-77","title":"Phase 1.2.5: Entity Graph Builder","description":"Build entity graph: EntityGraph class, link entities via relationships, assign semantic types with heuristics, calculate confidence scores. Files: lift_sys/nlp/entity_graph.py (~200 lines). Acceptance: Complete graph with all entities, 80%+ correct semantic types","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:13:45.615946-06:00","updated_at":"2025-10-15T08:13:45.615946-06:00","dependencies":[{"issue_id":"lift-sys-77","depends_on_id":"lift-sys-76","type":"blocks","created_at":"2025-10-15T08:13:45.616595-06:00","created_by":"rand"}]}
{"id":"lift-sys-78","title":"Phase 1.2.6: Entity Resolver Integration","description":"Integrate entity resolution pipeline: EntityResolver facade, wire components (tokenizer → extractor → coreference → graph), error handling, optimize to \u003c500ms for 100-token prompt. Files: lift_sys/nlp/entity_resolver.py (~250 lines)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:13:45.624538-06:00","updated_at":"2025-10-15T08:13:45.624538-06:00","dependencies":[{"issue_id":"lift-sys-78","depends_on_id":"lift-sys-77","type":"blocks","created_at":"2025-10-15T08:13:45.625174-06:00","created_by":"rand"}]}
{"id":"lift-sys-79","title":"Phase 1.3.1: Typed Hole Detection","description":"Detect unresolved elements: check entities for missing types, check signature parameters/returns, create TypedHole objects, classify hole types. Files: lift_sys/refinement/hole_detector.py (~200 lines). Acceptance: Detects all missing types, no false positives","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:13:45.632829-06:00","updated_at":"2025-10-15T08:13:45.632829-06:00","dependencies":[{"issue_id":"lift-sys-79","depends_on_id":"lift-sys-70","type":"blocks","created_at":"2025-10-15T08:13:45.633498-06:00","created_by":"rand"},{"issue_id":"lift-sys-79","depends_on_id":"lift-sys-78","type":"blocks","created_at":"2025-10-15T08:13:45.633723-06:00","created_by":"rand"}]}
{"id":"lift-sys-80","title":"Phase 1.3.2: Context-Based Suggestion Generator","description":"Generate suggestions from context: index codebase types, semantic similarity, query common patterns, use LLM for custom suggestions (Claude/GPT). Files: lift_sys/refinement/suggestion_generator.py (~300 lines). Acceptance: 3-5 suggestions per hole, top is correct 60%+ of time","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:18:34.820483-06:00","updated_at":"2025-10-15T08:18:34.820483-06:00","dependencies":[{"issue_id":"lift-sys-80","depends_on_id":"lift-sys-79","type":"blocks","created_at":"2025-10-15T08:18:34.821913-06:00","created_by":"rand"}]}
{"id":"lift-sys-81","title":"Phase 1.3.3: Hole Resolution Logic","description":"Implement resolution and propagation: apply user choice, update entity types, propagate to related entities, mark resolved, record history. Files: lift_sys/refinement/hole_resolver.py (~200 lines). Acceptance: IR updates correctly, changes propagate, history tracked, undo works","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:18:34.829566-06:00","updated_at":"2025-10-15T08:18:34.829566-06:00","dependencies":[{"issue_id":"lift-sys-81","depends_on_id":"lift-sys-80","type":"blocks","created_at":"2025-10-15T08:18:34.8302-06:00","created_by":"rand"}]}
{"id":"lift-sys-82","title":"Phase 1.3.4: Hole Manager Integration","description":"Integrate hole management into API: auto-detect on analysis, expose suggestions via API, handle resolution requests, persist state. Files: lift_sys/refinement/hole_manager.py (~150 lines). Acceptance: Holes detected automatically, API integration works","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:18:34.837199-06:00","updated_at":"2025-10-15T08:18:34.837199-06:00","dependencies":[{"issue_id":"lift-sys-82","depends_on_id":"lift-sys-81","type":"blocks","created_at":"2025-10-15T08:18:34.837853-06:00","created_by":"rand"}]}
{"id":"lift-sys-83","title":"Phase 1.4.1: Annotation Generation","description":"Generate UI annotations: AnnotationGenerator class, map entities to highlights, assign colors per entity type, generate tooltips, create bidirectional links. Files: lift_sys/visualization/annotation_generator.py (~250 lines)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:18:34.845388-06:00","updated_at":"2025-10-15T08:18:34.845388-06:00","dependencies":[{"issue_id":"lift-sys-83","depends_on_id":"lift-sys-78","type":"blocks","created_at":"2025-10-15T08:18:34.846135-06:00","created_by":"rand"}]}
{"id":"lift-sys-84","title":"Phase 1.4.2: Frontend Prompt Highlighter","description":"Build React highlighter component: PromptHighlighter.tsx, apply highlights from annotation data, implement hover states, click handlers for navigation, ensure 60fps. Files: frontend/src/components/PromptHighlighter.tsx (~400 lines), semantic-highlighting.css (~150 lines)","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:18:34.853919-06:00","updated_at":"2025-10-15T08:18:34.853919-06:00","dependencies":[{"issue_id":"lift-sys-84","depends_on_id":"lift-sys-83","type":"blocks","created_at":"2025-10-15T08:18:34.854545-06:00","created_by":"rand"}]}
{"id":"lift-sys-85","title":"Phase 1.4.3: Enhanced IR Viewer Component","description":"Enhance IR viewer with semantic annotations: add syntax highlighting, hover tooltips with provenance, click navigation to prompt, show confidence scores and refinement state. Update frontend/src/components/IRViewer.tsx (~300 lines)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:19:09.58411-06:00","updated_at":"2025-10-15T08:19:09.58411-06:00","dependencies":[{"issue_id":"lift-sys-85","depends_on_id":"lift-sys-83","type":"blocks","created_at":"2025-10-15T08:19:09.584772-06:00","created_by":"rand"}]}
{"id":"lift-sys-86","title":"Phase 1.4.4: Phase 1 Integration Testing","description":"Comprehensive E2E testing: test prompt→analysis→highlighting, test hole detection/suggestion, test UI interactions, performance testing, internal UAT. Files: tests/e2e/test_phase1_complete.py. Acceptance: All Phase 1 features work, performance meets targets, no critical bugs","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:19:09.592918-06:00","updated_at":"2025-10-15T08:19:09.592918-06:00","dependencies":[{"issue_id":"lift-sys-86","depends_on_id":"lift-sys-84","type":"blocks","created_at":"2025-10-15T08:19:09.593654-06:00","created_by":"rand"},{"issue_id":"lift-sys-86","depends_on_id":"lift-sys-85","type":"blocks","created_at":"2025-10-15T08:19:09.593879-06:00","created_by":"rand"}]}
{"id":"lift-sys-87","title":"Phase 2.1.1: Clause Extraction","description":"Extract clauses from spaCy dependency parse: identify main/subordinate clauses, extract verb phrases, classify clause types. Files: lift_sys/nlp/clause_extractor.py (~300 lines). Acceptance: Identifies all clauses, 90%+ correct classification","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:19:09.601518-06:00","updated_at":"2025-10-15T08:19:09.601518-06:00","dependencies":[{"issue_id":"lift-sys-87","depends_on_id":"lift-sys-78","type":"blocks","created_at":"2025-10-15T08:19:09.60219-06:00","created_by":"rand"}]}
{"id":"lift-sys-88","title":"Phase 2.1.2: Dependency Graph Builder","description":"Build clause dependency graph: ClauseDependencyGraph class, link via coordinators/subordinators, identify main vs dependent. Files: lift_sys/nlp/clause_graph.py (~250 lines). Acceptance: Correct dependency structure, handles complex dependencies","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:19:09.609679-06:00","updated_at":"2025-10-15T08:19:09.609679-06:00","dependencies":[{"issue_id":"lift-sys-88","depends_on_id":"lift-sys-87","type":"blocks","created_at":"2025-10-15T08:19:09.610333-06:00","created_by":"rand"}]}
{"id":"lift-sys-89","title":"Phase 2.1.3: Conditional and Temporal Extraction","description":"Extract conditions and temporal relationships: identify conditional clauses (if/unless/when), extract predicates, identify temporal order, link conditions to actions. Files: lift_sys/nlp/conditional_extractor.py (~200 lines)","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:19:09.6178-06:00","updated_at":"2025-10-15T08:19:09.6178-06:00","dependencies":[{"issue_id":"lift-sys-89","depends_on_id":"lift-sys-88","type":"blocks","created_at":"2025-10-15T08:19:09.618411-06:00","created_by":"rand"}]}
{"id":"lift-sys-90","title":"Phase 2.1.4: Clause Analyzer Integration - Integrate clause analysis into pipeline: ClauseAnalyzer facade, wire up all clause components, add to main analysis pipeline. Performance \u003c1s. Files: lift_sys/nlp/clause_analyzer.py (~200 lines). Acceptance: Complete clause analysis works, integrates with entity resolution","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:21:47.56148-06:00","updated_at":"2025-10-15T08:21:47.56148-06:00","dependencies":[{"issue_id":"lift-sys-90","depends_on_id":"lift-sys-89","type":"blocks","created_at":"2025-10-15T08:21:47.562428-06:00","created_by":"rand"}]}
{"id":"lift-sys-91","title":"Phase 2.2.1: Contradiction Detector - Detect contradictory statements: check conflicting assertions, identify mutually exclusive conditions, flag inconsistent requirements, rank by severity. 90%+ obvious contradictions, 70%+ likely, \u003c10% false positives. Files: lift_sys/refinement/contradiction_detector.py (~250 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:03.64209-06:00","updated_at":"2025-10-15T08:22:03.64209-06:00","dependencies":[{"issue_id":"lift-sys-91","depends_on_id":"lift-sys-90","type":"blocks","created_at":"2025-10-15T08:22:03.643695-06:00","created_by":"rand"}]}
{"id":"lift-sys-92","title":"Phase 2.2.2: Vague Term Detector - Detect overly general/vague terms: maintain vague terms dictionary, check entities/verbs, consider context, generate clarifying questions. 70%+ recall, 80%+ precision. Files: lift_sys/refinement/vague_term_detector.py (~200 lines), dictionary (~100 entries)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:03.781392-06:00","updated_at":"2025-10-15T08:22:03.781392-06:00","dependencies":[{"issue_id":"lift-sys-92","depends_on_id":"lift-sys-90","type":"blocks","created_at":"2025-10-15T08:22:03.78208-06:00","created_by":"rand"}]}
{"id":"lift-sys-93","title":"Phase 2.2.3: Missing Constraint Detector - Detect missing constraints and specifications: check untyped parameters, missing preconditions, missing validations, flag based on domain knowledge. 95%+ finds missing types. Files: lift_sys/refinement/constraint_detector.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:03.922911-06:00","updated_at":"2025-10-15T08:22:03.922911-06:00","dependencies":[{"issue_id":"lift-sys-93","depends_on_id":"lift-sys-79","type":"blocks","created_at":"2025-10-15T08:22:03.92357-06:00","created_by":"rand"}]}
{"id":"lift-sys-94","title":"Phase 2.2.4: Inconsistent Usage Detector - Detect inconsistent use of terms: track term usage across prompt, identify meaning shifts, flag potential confusion, suggest consistent terminology. Files: lift_sys/refinement/usage_detector.py (~150 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:04.06791-06:00","updated_at":"2025-10-15T08:22:04.06791-06:00","dependencies":[{"issue_id":"lift-sys-94","depends_on_id":"lift-sys-76","type":"blocks","created_at":"2025-10-15T08:22:04.068804-06:00","created_by":"rand"}]}
{"id":"lift-sys-95","title":"Phase 2.2.5: Ambiguity Ranker and Integrator - Integrate all ambiguity detectors: AmbiguityDetector facade, combine results, rank by severity/impact, generate user-friendly descriptions. Performance \u003c1s. Files: lift_sys/refinement/ambiguity_detector.py (~250 lines). Acceptance: All detectors integrated, ranking sensible","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:04.211768-06:00","updated_at":"2025-10-15T08:22:04.211768-06:00","dependencies":[{"issue_id":"lift-sys-95","depends_on_id":"lift-sys-91","type":"blocks","created_at":"2025-10-15T08:22:04.212529-06:00","created_by":"rand"},{"issue_id":"lift-sys-95","depends_on_id":"lift-sys-92","type":"blocks","created_at":"2025-10-15T08:22:04.212756-06:00","created_by":"rand"},{"issue_id":"lift-sys-95","depends_on_id":"lift-sys-93","type":"blocks","created_at":"2025-10-15T08:22:04.212983-06:00","created_by":"rand"},{"issue_id":"lift-sys-95","depends_on_id":"lift-sys-94","type":"blocks","created_at":"2025-10-15T08:22:04.213212-06:00","created_by":"rand"}]}
{"id":"lift-sys-96","title":"Phase 2.3.1: Rule Library for Common Patterns - Build library of inference rules: 100+ rules for common patterns (delete→exists, create→not exists, send→recipient, etc.). 90%+ precision. Files: lift_sys/refinement/inference_rules.py (~400 lines), rule documentation. Acceptance: 100+ rules, easy to add new rules","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:16.223131-06:00","updated_at":"2025-10-15T08:22:16.223131-06:00","dependencies":[{"issue_id":"lift-sys-96","depends_on_id":"lift-sys-90","type":"blocks","created_at":"2025-10-15T08:22:16.223776-06:00","created_by":"rand"}]}
{"id":"lift-sys-97","title":"Phase 2.3.2: Precondition Inference Engine - Infer preconditions from clauses: apply inference rules, generate precondition statements, assign confidence scores, link to source. 95%+ infers obvious preconditions. Files: lift_sys/refinement/precondition_inferencer.py (~250 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:16.363589-06:00","updated_at":"2025-10-15T08:22:16.363589-06:00","dependencies":[{"issue_id":"lift-sys-97","depends_on_id":"lift-sys-96","type":"blocks","created_at":"2025-10-15T08:22:16.36453-06:00","created_by":"rand"}]}
{"id":"lift-sys-98","title":"Phase 2.3.3: Missing Parameter Detection - Detect likely missing parameters: apply inference rules, check for implicit subjects, suggest parameter names/types, rank by likelihood. 60%+ finds missing parameters. Files: lift_sys/refinement/parameter_inferencer.py (~200 lines)","description":"","status":"open","priority":1,"issue_type":"task","created_at":"2025-10-15T08:22:16.506405-06:00","updated_at":"2025-10-15T08:22:16.506405-06:00","dependencies":[{"issue_id":"lift-sys-98","depends_on_id":"lift-sys-96","type":"blocks","created_at":"2025-10-15T08:22:16.507143-06:00","created_by":"rand"}]}
{"id":"lift-sys-99","title":"Phase 2.3.4: Implicit Term Finder Integration - Integrate implicit term finding: ImplicitTermFinder facade, combine inference engines, generate user-friendly descriptions. Performance \u003c1s. Files: lift_sys/refinement/implicit_term_finder.py (~150 lines). Acceptance: All inference engines integrated, results actionable","description":"","status":"open","priority":0,"issue_type":"task","created_at":"2025-10-15T08:22:16.646331-06:00","updated_at":"2025-10-15T08:22:16.646331-06:00","dependencies":[{"issue_id":"lift-sys-99","depends_on_id":"lift-sys-97","type":"blocks","created_at":"2025-10-15T08:22:16.647102-06:00","created_by":"rand"},{"issue_id":"lift-sys-99","depends_on_id":"lift-sys-98","type":"blocks","created_at":"2025-10-15T08:22:16.647335-06:00","created_by":"rand"}]}
