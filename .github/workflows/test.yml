name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: uv sync

      - name: Run Ruff
        run: uv run ruff check lift_sys/ tests/

      - name: Check formatting
        run: uv run ruff format --check lift_sys/ tests/

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12', '3.13']

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: uv sync

      - name: Start API server
        run: |
          uv run uvicorn lift_sys.api.server:app --host 127.0.0.1 --port 8000 &
          sleep 5
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -s http://127.0.0.1:8000/ > /dev/null; then
              echo "API server is ready"
              break
            fi
            echo "Waiting for API server... ($i/30)"
            sleep 1
          done
        env:
          LIFT_SYS_ENABLE_DEMO_USER_HEADER: "1"

      - name: Run tests
        run: |
          uv run pytest tests/ \
            --cov=lift_sys \
            --cov-report=xml \
            --cov-report=term \
            -v
        env:
          LIFT_SYS_ENABLE_DEMO_USER_HEADER: "1"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.python-version }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  frontend:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Build
        run: npm run build
