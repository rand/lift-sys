{
  "summary": {
    "total_runs": 5,
    "successful_runs": 5,
    "failed_runs": 0,
    "nlp_to_ir_mean": 8847.84419159405,
    "nlp_to_ir_median": 8492.9812499322,
    "nlp_to_ir_std": 1302.6697980529598,
    "ir_to_code_mean": 16817.88807520643,
    "ir_to_code_median": 21091.37120912783,
    "ir_to_code_std": 11185.661844300801,
    "e2e_mean": 25665.732266800478,
    "e2e_median": 29046.28650005907,
    "e2e_std": 12235.406505212668,
    "total_cost_usd": 0.02188811022233373,
    "cost_per_request_mean": 0.0043776220444667465,
    "memory_mean": 0.6487771987915039,
    "memory_peak": 0.877507209777832
  },
  "results": [
    {
      "test_name": "add_numbers",
      "prompt": "Create a function that adds two numbers",
      "timestamp": "2025-10-17T17:44:12.748428",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 10634.952374966815,
        "memory_mb": 0.2733793258666992,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that adds two numbers",
              "rationale": "The function will take two numbers as input and return their sum. This is a basic arithmetic operation that is often used in various applications.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "add_two_numbers",
              "parameters": [
                {
                  "name": "num1",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                },
                {
                  "name": "num2",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "position_constraint",
                "description": "The function should take exactly two parameters.",
                "severity": "error",
                "elements": [
                  "num1",
                  "num2"
                ],
                "requirement": "NOT_ADJACENT",
                "min_distance": 0,
                "max_distance": null
              },
              {
                "type": "return_constraint",
                "description": "The function should return an integer.",
                "severity": "error",
                "value_name": "sum",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 29958.918415941298,
        "memory_mb": 0.6041278839111328,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def add_two_numbers(num1: int, num2: int) -> int:\n    \"\"\"Create a function that adds two numbers.\n    \n    The function will take two numbers as input and return their sum. This is a basic arithmetic operation that is often used in various applications.\n    \n    Args:\n        num1: Parameter value\n        num2: Parameter value\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: The function takes two integer inputs, adds them, and returns the result. No error handling is required for this simple addition as the input types are guaranteed to be integers.\n\n    # Calculate the sum of the two input numbers\n    sum_of_numbers = num1 + num2\n    # Return the calculated sum\n    return sum_of_numbers",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 5,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 40593.87079090811,
      "total_memory_mb": 0.877507209777832,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.006865645131818019,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that adds two numbers",
          "rationale": "The function will take two numbers as input and return their sum. This is a basic arithmetic operation that is often used in various applications.",
          "holes": []
        },
        "signature": {
          "name": "add_two_numbers",
          "parameters": [
            {
              "name": "num1",
              "type_hint": "int",
              "description": null
            },
            {
              "name": "num2",
              "type_hint": "int",
              "description": null
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "position_constraint",
            "description": "The function should take exactly two parameters.",
            "severity": "error",
            "elements": [
              "num1",
              "num2"
            ],
            "requirement": "NOT_ADJACENT",
            "min_distance": 0
          },
          {
            "type": "return_constraint",
            "description": "The function should return an integer.",
            "severity": "error",
            "value_name": "sum",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "multiply",
      "prompt": "Create a function that multiplies two numbers",
      "timestamp": "2025-10-17T17:44:53.343229",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 7954.91529093124,
        "memory_mb": 0.2722482681274414,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that multiplies two numbers",
              "rationale": "The function will take two numbers as input and return their product.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "multiply_numbers",
              "parameters": [
                {
                  "name": "a",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                },
                {
                  "name": "b",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "position_constraint",
                "description": "The function should take exactly two parameters.",
                "severity": "error",
                "elements": [
                  "a",
                  "b"
                ],
                "requirement": "NOT_ADJACENT",
                "min_distance": 0,
                "max_distance": null
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 21091.37120912783,
        "memory_mb": 0.35983943939208984,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def multiply_numbers(a: int, b: int) -> int:\n    \"\"\"Create a function that multiplies two numbers.\n    \n    The function will take two numbers as input and return their product.\n    \n    Args:\n        a: Parameter value\n        b: Parameter value\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: The function simply multiplies the two input integers and returns the result.\n\n    # Return the product of a and b\n    return a * b",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 5,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 29046.28650005907,
      "total_memory_mb": 0.6320877075195312,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.004941047750009845,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that multiplies two numbers",
          "rationale": "The function will take two numbers as input and return their product.",
          "holes": []
        },
        "signature": {
          "name": "multiply_numbers",
          "parameters": [
            {
              "name": "a",
              "type_hint": "int",
              "description": null
            },
            {
              "name": "b",
              "type_hint": "int",
              "description": null
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "position_constraint",
            "description": "The function should take exactly two parameters.",
            "severity": "error",
            "elements": [
              "a",
              "b"
            ],
            "requirement": "NOT_ADJACENT",
            "min_distance": 0
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "string_length",
      "prompt": "Create a function that returns the length of a string",
      "timestamp": "2025-10-17T17:45:22.390276",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 9701.875917147845,
        "memory_mb": 0.27245426177978516,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that returns the length of a string",
              "rationale": "The function is needed to determine the number of characters in a given string.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "get_string_length",
              "parameters": [
                {
                  "name": "input_string",
                  "type_hint": "str",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "position_constraint",
                "description": "The function should take exactly one argument, which is a string.",
                "severity": "error",
                "elements": [
                  "input_string"
                ],
                "requirement": "NOT_ADJACENT",
                "min_distance": 0,
                "max_distance": null
              },
              {
                "type": "return_constraint",
                "description": "The function should return an integer representing the length of the string.",
                "severity": "error",
                "value_name": "return_value",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 22783.589707920328,
        "memory_mb": 0.3553171157836914,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def get_string_length(input_string: str) -> int:\n    \"\"\"Create a function that returns the length of a string.\n    \n    The function is needed to determine the number of characters in a given string.\n    \n    Args:\n        input_string: Parameter value\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: The function simply returns the length of the input string using the built-in len() function.\n\n    # Return the length of the input string\n    return len(input_string)",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 5,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 32485.465625068173,
      "total_memory_mb": 0.6277713775634766,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.005514244270844695,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that returns the length of a string",
          "rationale": "The function is needed to determine the number of characters in a given string.",
          "holes": []
        },
        "signature": {
          "name": "get_string_length",
          "parameters": [
            {
              "name": "input_string",
              "type_hint": "str",
              "description": null
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "position_constraint",
            "description": "The function should take exactly one argument, which is a string.",
            "severity": "error",
            "elements": [
              "input_string"
            ],
            "requirement": "NOT_ADJACENT",
            "min_distance": 0
          },
          {
            "type": "return_constraint",
            "description": "The function should return an integer representing the length of the string.",
            "severity": "error",
            "value_name": "return_value",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "max_of_two",
      "prompt": "Create a function that returns the maximum of two numbers",
      "timestamp": "2025-10-17T17:45:54.876498",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 7454.496124992147,
        "memory_mb": 0.27228260040283203,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that returns the maximum of two numbers",
              "rationale": "The function is needed to determine the larger of two numeric values",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "get_maximum",
              "parameters": [
                {
                  "name": "num1",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                },
                {
                  "name": "num2",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function must return the larger of the two input numbers",
                "severity": "error",
                "value_name": "result",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 4571.021209005266,
        "memory_mb": 0.2817802429199219,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def get_maximum(num1: int, num2: int) -> int:\n    \"\"\"Create a function that returns the maximum of two numbers.\n    \n    The function is needed to determine the larger of two numeric values\n    \n    Args:\n        num1: Parameter value\n        num2: Parameter value\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: Compare the two input numbers and return the greater one using a conditional expression.\n\n    # Return the greater of the two numbers using a conditional expression\n    return num1 if num1 > num2 else num2",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 12025.517333997414,
      "total_memory_mb": 0.5540628433227539,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.002104252888999569,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that returns the maximum of two numbers",
          "rationale": "The function is needed to determine the larger of two numeric values",
          "holes": []
        },
        "signature": {
          "name": "get_maximum",
          "parameters": [
            {
              "name": "num1",
              "type_hint": "int",
              "description": null
            },
            {
              "name": "num2",
              "type_hint": "int",
              "description": null
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function must return the larger of the two input numbers",
            "severity": "error",
            "value_name": "result",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "is_even",
      "prompt": "Create a function that checks if a number is even",
      "timestamp": "2025-10-17T17:46:06.902711",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 8492.9812499322,
        "memory_mb": 0.27209949493408203,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that checks if a number is even",
              "rationale": "The function will be used to determine if a given integer is even, which is a common requirement in many programming tasks.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "is_number_even",
              "parameters": [
                {
                  "name": "number",
                  "type_hint": "int",
                  "description": "The integer to check for evenness",
                  "provenance": null
                }
              ],
              "returns": "bool",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function should return True if the number is even, and False otherwise.",
                "severity": "error",
                "value_name": "return_value",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 5684.539834037423,
        "memory_mb": 0.28035736083984375,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def is_number_even(number: int) -> bool:\n    \"\"\"Create a function that checks if a number is even.\n    \n    The function will be used to determine if a given integer is even, which is a common requirement in many programming tasks.\n    \n    Args:\n        number: The integer to check for evenness\n    \n    Returns:\n        bool\n    \"\"\"\n    # Algorithm: The function checks if the number is divisible by 2 with no remainder. If true, the number is even, and the function returns True. Otherwise, it returns False.\n\n    # Check if the number is divisible by 2 with no remainder, which indicates it is even\n    return number % 2 == 0",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 14177.521083969623,
      "total_memory_mb": 0.5524568557739258,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.0024629201806616037,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that checks if a number is even",
          "rationale": "The function will be used to determine if a given integer is even, which is a common requirement in many programming tasks.",
          "holes": []
        },
        "signature": {
          "name": "is_number_even",
          "parameters": [
            {
              "name": "number",
              "type_hint": "int",
              "description": "The integer to check for evenness"
            }
          ],
          "returns": "bool",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function should return True if the number is even, and False otherwise.",
            "severity": "error",
            "value_name": "return_value",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    }
  ]
}
