{
  "summary": {
    "total_runs": 5,
    "successful_runs": 5,
    "failed_runs": 0,
    "nlp_to_ir_mean": 8280.970349999552,
    "nlp_to_ir_median": 8852.279500002624,
    "nlp_to_ir_std": 952.4552342443201,
    "ir_to_code_mean": 4911.0644416025025,
    "ir_to_code_median": 4745.46037500113,
    "ir_to_code_std": 786.000177943468,
    "e2e_mean": 13192.034791602055,
    "e2e_median": 13288.122375000967,
    "e2e_std": 1226.9316021528402,
    "total_cost_usd": 0.011493362326335044,
    "cost_per_request_mean": 0.002298672465267009,
    "memory_mean": 0.5565101623535156,
    "memory_peak": 0.5585622787475586
  },
  "results": [
    {
      "test_name": "add_numbers",
      "prompt": "Create a function that adds two numbers",
      "timestamp": "2025-10-22T19:28:28.249186",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 8852.279500002624,
        "memory_mb": 0.2740812301635742,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that adds two numbers",
              "rationale": "The function will take two numbers as input and return their sum.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "add_two_numbers",
              "parameters": [
                {
                  "name": "num1",
                  "type_hint": "int",
                  "description": "The first number to be added",
                  "provenance": null
                },
                {
                  "name": "num2",
                  "type_hint": "int",
                  "description": "The second number to be added",
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function must return the sum of num1 and num2",
                "severity": "error",
                "value_name": "result",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 5778.433750005206,
        "memory_mb": 0.2844810485839844,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def add_two_numbers(num1: int, num2: int) -> int:\n    \"\"\"Create a function that adds two numbers.\n    \n    The function will take two numbers as input and return their sum.\n    \n    Args:\n        num1: The first number to be added\n        num2: The second number to be added\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: The algorithm takes two integers as input, adds them together, and returns the result.\n\n    # Calculate the sum of num1 and num2\n    result = num1 + num2\n    # Return the calculated sum\n    return result",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 14630.71325000783,
      "total_memory_mb": 0.5585622787475586,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.002538452208334638,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that adds two numbers",
          "rationale": "The function will take two numbers as input and return their sum.",
          "holes": []
        },
        "signature": {
          "name": "add_two_numbers",
          "parameters": [
            {
              "name": "num1",
              "type_hint": "int",
              "description": "The first number to be added"
            },
            {
              "name": "num2",
              "type_hint": "int",
              "description": "The second number to be added"
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function must return the sum of num1 and num2",
            "severity": "error",
            "value_name": "result",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "multiply",
      "prompt": "Create a function that multiplies two numbers",
      "timestamp": "2025-10-22T19:28:42.880302",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 8892.836166996858,
        "memory_mb": 0.27381229400634766,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that multiplies two numbers",
              "rationale": "The function will take two numbers as input and return their product.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "multiply_numbers",
              "parameters": [
                {
                  "name": "a",
                  "type_hint": "int",
                  "description": "The first number to multiply",
                  "provenance": null
                },
                {
                  "name": "b",
                  "type_hint": "int",
                  "description": "The second number to multiply",
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "position_constraint",
                "description": "The function should take exactly two parameters.",
                "severity": "error",
                "elements": [
                  "a",
                  "b"
                ],
                "requirement": "NOT_ADJACENT",
                "min_distance": 0,
                "max_distance": null
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 3955.998625002394,
        "memory_mb": 0.28465843200683594,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def multiply_numbers(a: int, b: int) -> int:\n    \"\"\"Create a function that multiplies two numbers.\n    \n    The function will take two numbers as input and return their product.\n    \n    Args:\n        a: The first number to multiply\n        b: The second number to multiply\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: Multiply the two input integers and return the result.\n\n    # Return the product of a and b\n    return a * b",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 12848.834791999252,
      "total_memory_mb": 0.5584707260131836,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.0022414724653332086,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that multiplies two numbers",
          "rationale": "The function will take two numbers as input and return their product.",
          "holes": []
        },
        "signature": {
          "name": "multiply_numbers",
          "parameters": [
            {
              "name": "a",
              "type_hint": "int",
              "description": "The first number to multiply"
            },
            {
              "name": "b",
              "type_hint": "int",
              "description": "The second number to multiply"
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "position_constraint",
            "description": "The function should take exactly two parameters.",
            "severity": "error",
            "elements": [
              "a",
              "b"
            ],
            "requirement": "NOT_ADJACENT",
            "min_distance": 0
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "string_length",
      "prompt": "Create a function that returns the length of a string",
      "timestamp": "2025-10-22T19:28:55.729630",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 6921.823832999507,
        "memory_mb": 0.2731790542602539,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that returns the length of a string",
              "rationale": "The function is needed to determine the number of characters in a given string.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "get_string_length",
              "parameters": [
                {
                  "name": "input_string",
                  "type_hint": "str",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function must return an integer representing the length of the input string.",
                "severity": "error",
                "value_name": "length",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 4426.4866250014165,
        "memory_mb": 0.2819356918334961,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def get_string_length(input_string: str) -> int:\n    \"\"\"Create a function that returns the length of a string.\n    \n    The function is needed to determine the number of characters in a given string.\n    \n    Args:\n        input_string: Parameter value\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: Use Python's built-in len function to calculate the length of the input string\n\n    # Return the length of the input string using the built-in len function\n    return len(input_string)",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 11348.310458000924,
      "total_memory_mb": 0.55511474609375,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.0019913850763334873,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that returns the length of a string",
          "rationale": "The function is needed to determine the number of characters in a given string.",
          "holes": []
        },
        "signature": {
          "name": "get_string_length",
          "parameters": [
            {
              "name": "input_string",
              "type_hint": "str",
              "description": null
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function must return an integer representing the length of the input string.",
            "severity": "error",
            "value_name": "length",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "max_of_two",
      "prompt": "Create a function that returns the maximum of two numbers",
      "timestamp": "2025-10-22T19:29:07.078461",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 9098.73270800017,
        "memory_mb": 0.2732057571411133,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that returns the maximum of two numbers",
              "rationale": "The function will take two numbers as input and return the larger of the two.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "get_maximum",
              "parameters": [
                {
                  "name": "num1",
                  "type_hint": "int",
                  "description": "The first number to compare",
                  "provenance": null
                },
                {
                  "name": "num2",
                  "type_hint": "int",
                  "description": "The second number to compare",
                  "provenance": null
                }
              ],
              "returns": "int",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function must return the larger of the two input numbers",
                "severity": "error",
                "value_name": "result",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 4745.46037500113,
        "memory_mb": 0.28357696533203125,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def get_maximum(num1: int, num2: int) -> int:\n    \"\"\"Create a function that returns the maximum of two numbers.\n    \n    The function will take two numbers as input and return the larger of the two.\n    \n    Args:\n        num1: The first number to compare\n        num2: The second number to compare\n    \n    Returns:\n        int\n    \"\"\"\n    # Algorithm: Compare the two input numbers and return the larger one using a conditional expression.\n\n    # Return the larger of the two numbers using a conditional expression\n    return num1 if num1 > num2 else num2",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 13844.1930830013,
      "total_memory_mb": 0.5567827224731445,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.0024073655138335498,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that returns the maximum of two numbers",
          "rationale": "The function will take two numbers as input and return the larger of the two.",
          "holes": []
        },
        "signature": {
          "name": "get_maximum",
          "parameters": [
            {
              "name": "num1",
              "type_hint": "int",
              "description": "The first number to compare"
            },
            {
              "name": "num2",
              "type_hint": "int",
              "description": "The second number to compare"
            }
          ],
          "returns": "int",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function must return the larger of the two input numbers",
            "severity": "error",
            "value_name": "result",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    },
    {
      "test_name": "is_even",
      "prompt": "Create a function that checks if a number is even",
      "timestamp": "2025-10-22T19:29:20.923125",
      "nlp_to_ir": {
        "name": "nlp_to_ir",
        "latency_ms": 7639.179541998601,
        "memory_mb": 0.27167320251464844,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "intent": {
              "summary": "Create a function that checks if a number is even",
              "rationale": "To determine if a number is even, we need to check if the remainder when divided by 2 is zero.",
              "holes": [],
              "provenance": null
            },
            "signature": {
              "name": "is_number_even",
              "parameters": [
                {
                  "name": "number",
                  "type_hint": "int",
                  "description": null,
                  "provenance": null
                }
              ],
              "returns": "bool",
              "holes": [],
              "provenance": null
            },
            "effects": [],
            "assertions": [],
            "metadata": {
              "source_path": null,
              "language": null,
              "origin": null,
              "evidence": []
            },
            "constraints": [
              {
                "type": "return_constraint",
                "description": "The function should return True if the number is even, otherwise False.",
                "severity": "error",
                "value_name": "result",
                "requirement": "MUST_RETURN"
              }
            ]
          }
        }
      },
      "ir_to_code": {
        "name": "ir_to_code",
        "latency_ms": 5648.942833002366,
        "memory_mb": 0.28194713592529297,
        "success": true,
        "error": null,
        "metadata": {
          "result": {
            "source_code": "def is_number_even(number: int) -> bool:\n    \"\"\"Create a function that checks if a number is even.\n    \n    To determine if a number is even, we need to check if the remainder when divided by 2 is zero.\n    \n    Args:\n        number: Parameter value\n    \n    Returns:\n        bool\n    \"\"\"\n    # Algorithm: The function checks if the input number is divisible by 2 without a remainder. If true, the number is even; otherwise, it is odd.\n\n    # Check if the number is divisible by 2 without a remainder, which indicates it is even.\n    return number % 2 == 0",
            "language": "python",
            "ir_version": null,
            "metadata": {
              "ir_origin": null,
              "generator": "xgrammar_constrained",
              "attempts": 1,
              "constrained_generation": true
            },
            "warnings": []
          }
        }
      },
      "total_latency_ms": 13288.122375000967,
      "total_memory_mb": 0.5536203384399414,
      "end_to_end_success": true,
      "estimated_cost_usd": 0.002314687062500161,
      "provider_type": "modal",
      "ir_output": {
        "intent": {
          "summary": "Create a function that checks if a number is even",
          "rationale": "To determine if a number is even, we need to check if the remainder when divided by 2 is zero.",
          "holes": []
        },
        "signature": {
          "name": "is_number_even",
          "parameters": [
            {
              "name": "number",
              "type_hint": "int",
              "description": null
            }
          ],
          "returns": "bool",
          "holes": []
        },
        "effects": [],
        "assertions": [],
        "metadata": {
          "source_path": null,
          "language": null,
          "origin": null,
          "evidence": []
        },
        "constraints": [
          {
            "type": "return_constraint",
            "description": "The function should return True if the number is even, otherwise False.",
            "severity": "error",
            "value_name": "result",
            "requirement": "MUST_RETURN"
          }
        ]
      },
      "code_output": "<5 chars>",
      "execution_tests": [],
      "execution_success": false
    }
  ]
}
